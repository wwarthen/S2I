0001   0000             ;
0002   0000             ;==================================================================================================
0003   0000             ;   WRAPPER FOR ZAPPLE MONITOR FOR N8VEM PROJECT
0004   0000             ;   WAYNE WARTHEN - 2012-11-26
0005   0000             ;==================================================================================================
0006   0000             ;
0007   0000             ; THE FOLLOWING MACROS DO THE HEAVY LIFTING TO MAKE THE ZAPPLE SOURCE
0008   0000             ; COMPATIBLE WITH TASM
0009   0000             ;
0010   0000             #DEFINE		EQU	.EQU
0011   0000             #DEFINE		NAME	\;
0012   0000             #DEFINE		PAGE	.PAGE
0013   0000             #DEFINE		CSEG	.CSEG
0014   0000             #DEFINE		DSEG	.DSEG
0015   0000             #DEFINE		ORG	.ORG
0016   0000             #DEFINE		END	.END
0017   0000             #DEFINE		IF	.IF
0018   0000             #DEFINE		ELSE	.ELSE
0019   0000             #DEFINE		ENDIF	.ENDIF
0020   0000             #DEFINE		DEFB	.DB
0021   0000             #DEFINE		DB	.DB
0022   0000             #DEFINE		DEFW	.DW
0023   0000             #DEFINE		DW	.DW
0024   0000             #DEFINE		.	_
0025   0000             #DEFINE		TITLE	.TITLE
0026   0000             #DEFINE		EXT	\;
0027   0000             #DEFINE		NOT	~
0028   0000             ;
0029   0000             ; BELOW WE ADD SOME INSTRUCTION FORMATS EXPECTED BY ZAPPLE SOURCE
0030   0000             ;
0031   0000             #ADDINSTR	IN	A,*	DB	2	NOP	1
0032   0000             #ADDINSTR	OUT	*,A	D3	2	NOP	1
0033   0000             #ADDINSTR	ADD	A	87	1	NOP	1
0034   0000             #ADDINSTR	ADD	D	82	1	NOP	1
0035   0000             #ADDINSTR	ADD	*	C6	2	NOP	1
0036   0000             #ADDINSTR	ADC	A	8F	1	NOP	1
0037   0000             #ADDINSTR	ADC	*	CE	2	NOP	1
0038   0000             #ADDINSTR	SBC	H	9C	1	NOP	1
0039   0000             ;
0040   0000             ; USER DEFINED ROUTINES (NEED TO DO SOMETHING WITH THESE!!!)
0041   0000             ;
0042   0000             COLOC		.EQU	0
0043   0000             LNLOC		.EQU	0
0044   0000             LULOC		.EQU	0
0045   0000             PTPL		.EQU	0
0046   0000             PULOC		.EQU	0
0047   0000             CSLOC		.EQU	0
0048   0000             CILOC		.EQU	0
0049   0000             RPTPL		.EQU	0
0050   0000             RULOC		.EQU	0
0051   0000             ;
0052   0000             ; 16C550 SERIAL LINE UART
0053   0000             ;
0054   0000             SIO_BASE	.EQU	90H
0055   0000             SIO_RBR		.EQU	SIO_BASE + 0	; DLAB=0: RCVR BUFFER REG (READ ONLY)
0056   0000             SIO_THR		.EQU	SIO_BASE + 0	; DLAB=0: XMIT HOLDING REG (WRITE ONLY)
0057   0000             SIO_IER		.EQU	SIO_BASE + 1	; DLAB=0: INT ENABLE REG
0058   0000             SIO_IIR		.EQU	SIO_BASE + 2	; INT IDENT REGISTER (READ ONLY)
0059   0000             SIO_FCR		.EQU	SIO_BASE + 2	; FIFO CONTROL REG (WRITE ONLY)
0060   0000             SIO_LCR		.EQU	SIO_BASE + 3	; LINE CONTROL REG
0061   0000             SIO_MCR		.EQU	SIO_BASE + 4	; MODEM CONTROL REG
0062   0000             SIO_LSR		.EQU	SIO_BASE + 5	; LINE STATUS REG
0063   0000             SIO_MSR		.EQU	SIO_BASE + 6	; MODEM STATUS REG
0064   0000             SIO_SCR		.EQU	SIO_BASE + 7	; SCRATCH REGISTER
0065   0000             SIO_DLL		.EQU	SIO_BASE + 0	; DLAB=1: DIVISOR LATCH (LS)
0066   0000             SIO_DLM		.EQU	SIO_BASE + 1	; DLAB=1: DIVISOR LATCH (MS)
0067   0000             ;
0068   0000             BAUDRATE	.EQU	38400
0069   0000             UART_DIV	.EQU	(1843200 / (16 * BAUDRATE))
0070   0000             ;
0071   0000             ;
0072   0000             ;
0073   0000             BASE		.EQU	$6000
0074   0000             ;
0075   0000             ; NOW INCLUDE THE MAIN SOURCE
0076   0000             ;
0077   0000             #INCLUDE "zapple.z80"
0001+  0000             ;	<< ZAPPLE 2-K MONITOR SYSTEM >>
0002+  0000             ;		by
0003+  0000             ;
0004+  0000             ;	TECHNICAL DESIGN LABS, INC.
0005+  0000             ;	RESEARCH PARK
0006+  0000             ;	PRINCETON, NEW JERSEY  08540
0007+  0000             ;
0008+  0000             ;	COPYRIGHT JULY 1976 BY TDL INC.
0009+  0000             ;
0010+  0000             ;	ASSEMBLED BY ROGER AMIDON
0011+  0000             ;
0012+  0000             ;
0013+  0000             ;BASE:	EQU	0F000H		; WW: NOW DEFINED IN WRAPPER
0014+  0000             USER:	EQU	BASE+800H
0015+  0000             ;
0016+  0000             	TITLE	<Zapple Monitor, Version 1.11, Dec. 18, 1976>
0017+  0000             ;
0018+  0000             ;RST:	EQU	38H		;RST 7 (LOCATION FOR TRAP)
0019+  0000             RST:	EQU	30H		;RST 6 (LOCATION FOR TRAP)
0020+  0000             ;WW	IOBYT:	EQU	76H	;R/W PORT FOR TEMP. STORAGE
0021+  0000             IOBYT:	EQU	SIO_SCR		; WW - USING UART SPR FOR TEMP. STORAGE
0022+  0000             ;WW	SENSE:	EQU	7AH	;PORT FOR INITIAL I/O CMNFIGURATIOL (IN)
0023+  0000             ;WW	SWITCH:	EQU	0FFH	;FRONT PANEL SENSE SWITCHES
0024+  0000             ;WW	RCP:	EQU	7AH	;READER CONTROL PORT (OUT)
0025+  0000             ;WW	NN:	EQU	0F8H	;"I" REGISTER INITIAL VALUE
0026+  0000             ;
0027+  0000             ;	EXTERNAL EQUATES
0028+  0000             ;
0029+  0000             	NAME	ZAPPLE
0029+  0000             
0030+  0000             	EXT	COLOC
0030+  0000             
0031+  0000             	EXT	LNLOC
0031+  0000             
0032+  0000             	EXT	LULOC
0032+  0000             
0033+  0000             	EXT	PTPL
0033+  0000             
0034+  0000             	EXT	PULOC
0034+  0000             
0035+  0000             	EXT	CSLOC
0035+  0000             
0036+  0000             	EXT	CILOC
0036+  0000             
0037+  0000             	EXT	RPTPL
0037+  0000             
0038+  0000             	EXT	RULOC
0038+  0000             
0039+  0000             ;
0040+  0000             ;
0041+  0000             ;	<I/O DEVICES>
0042+  0000             ;
0043+  0000             ;-TELEPRINTER
0044+  0000             ;
0045+  0000             ; WW: VALUES BELOW MODIFIED FOR N8VEM STD UART PORTS
0046+  0000             TTI:	EQU	SIO_RBR	     ;DATA IN PORT
0047+  0000             TTO:	EQU	SIO_THR	     ;DATA OUT PORT
0048+  0000             TTS:	EQU	SIO_LSR	     ;STATUS PORT (IN)
0049+  0000             TTYDA:	EQU	$01	     ;DATA AVAILABLE MASK BIT
0050+  0000             TTYBE:	EQU	$20	     ;XMTR BUFFER EMPTY MASK
0051+  0000             ;
0052+  0000             ;-C.R.T. SYSTEM
0053+  0000             ;
0054+  0000             CRTI:	EQU	51H	     ;DATA PORT (IN)
0055+  0000             CRTS:	EQU	50H	     ;STATUS PORT (IN)
0056+  0000             CRTO:	EQU	51H	     ;DATA PORT (OUT)
0057+  0000             CRTDA:	EQU	40H	     ;DATA AVAILABLE MASK
0058+  0000             CRTBE:	EQU	80H	     ;XMTR BUFFER EMPTY MASK
0059+  0000             ;
0060+  0000             ;-CASSETTE SYSTEM
0061+  0000             ;
0062+  0000             RCSD:	EQU	61H	     ;DATA IN PORT
0063+  0000             RCSS:	EQU	60H	     ;STATUS PORT (IN)
0064+  0000             RCSDA:	EQU	40H	     ;DATA AVAILABLE MASK
0065+  0000             PCASO:	EQU	61H	     ;DATA PORT (OUT)
0066+  0000             PCASS:	EQU	60H	     ;CONTROL PORT (OUT)
0067+  0000             PCSBE:	EQU	80H		     ;XMTR BUFFER EMPTY MASK
0068+  0000             ;
0069+  0000             ;	<CONSTANTS>
0070+  0000             ;
0071+  0000             FALSE:	EQU	0	     ;ISN'T SO
0072+  0000             TRUE:	EQU	NOT FALSE    ;IT IS SO
0073+  0000             CR:	EQU	0DH	     ;ASCII CARRIAGE RETURN
0074+  0000             LF:	EQU	0AH	     ;ASCII LINE FEED
0075+  0000             BELL:	EQU	7	     ;DING
0076+  0000             RUB:	EQU	0FFH	     ;RUB OUT
0077+  0000             FIL:	EQU	00	     ;FILL CHARACTER AFTER CRLF
0078+  0000             MAX:	EQU	7	     ;NUMBER OF QUES IN EOF
0079+  0000             ;
0080+  0000             ;	<I/O CONFIGURATION MASKS>
0081+  0000             ;
0082+  0000             CMSK:	EQU	11111100B    ;CONSOLE DEVICE
0083+  0000             RMSK:	EQU	11110011B    ;STORAGE DEVICE (IN)
0084+  0000             PMSK:	EQU	11001111B    ;STORAGE DEVICE (OUT)
0085+  0000             LMSK:	EQU	00111111B    ;LIST DEVICE
0086+  0000             ;
0087+  0000             ;
0088+  0000             ;-CONSOLE CONFIGURATION
0089+  0000             CTTY:	EQU	0	     ;TELEPRINTER
0090+  0000             CCRT:	EQU	1	     ;C.R.T.
0091+  0000             BATCH:	EQU	2	     ;READER FOR INPUT, LIST FOR OUTPUT
0092+  0000             CUSE:	EQU	3	     ;USER DEFINED
0093+  0000             ;
0094+  0000             ;-STORAGE INPUT CONFIGURATION
0095+  0000             RTTY:	EQU	0	     ;TELEPRINTER READER
0096+  0000             RPTR:	EQU	4	     ;HIGH-SPEED RDR (EXTERNAL ROUTINE)
0097+  0000             RCAS:	EQU	8	     ;CASSETTE
0098+  0000             RUSER:	EQU	0CH	     ;USER DEFINED
0099+  0000             ;
0100+  0000             ;-STORAGE OUTPUT CONFIGURATION
0101+  0000             PTTY:	EQU	0	     ;TELEPRINTER PUNCH
0102+  0000             PPTP:	EQU	10H	     ;HIGH-SPEED PUNCH (EXTERNAL ROUTINE)
0103+  0000             PCAS:	EQU	20H	     ;CASSETTE
0104+  0000             PUSER:	EQU	30H	     ;USER DEFINED
0105+  0000             ;
0106+  0000             ;-LIST DEVICE CONFIGURATION
0107+  0000             LTTY:	EQU	0	     ;TELEPRINTER PRINTER
0108+  0000             LCRT:	EQU	40H	     ;C.R.T. SCREEN
0109+  0000             LINE:	EQU	80H	     ;LINE PRINTER (EXTERNAL ROUTINE)
0110+  0000             LUSER:	EQU	0C0H	     ;USER DEFINED
0111+  0000             ;
0112+  0000             ;
0113+  0000             ;	VECTOR FOR USER DEFINED ROUTINES
0114+  0000             ;
0115+  0000             ;.LOC:	USER	
0116+  0000             ;CILOC:	.BLKB	3	     ;CONSOLE INPUT
0117+  0000             ;COLOC:	.BLKB	3	     ;CONSOLE OUTPUT
0118+  0000             ;RPTPL:	.BLKB	3	     ;HIGH-SPEED READER
0119+  0000             ;RULOC:	.BLKB	3	     ;USER DEFINED STORAGE (INPUT)
0120+  0000             ;PTPL:	.BLKB	3	     ;HIGH-SPEED PUNCH
0121+  0000             ;PULOC:	.BLKB	3	     ;USER DEFINED STORAGE (OUTPUT)
0122+  0000             ;LNLOC:	.BLKB	3	     ;LINE PRINTER
0123+  0000             ;LULOC:	.BLKB	3	     ;USER DEFINED PRINTER
0124+  0000             ;CSLOC:	.BLKB	3	     ;CONSOLE INPUT STATUS ROUTINE
0125+  0000             ;J:	=.	
0126+  0000             ;
0127+  0000             ;	PROGRAM CODE BEGINS HERE
0128+  0000             ;
0129+  0000             ;
0130+  6000             	.ORG	BASE		; WW: MODIFIED FOR TASM SYNTAX
0131+  6000 C3 31 60    	JP	BEGIN	     ;GO AROUND VECTORS
0132+  6003             ;
0133+  6003             ;	<VECTOR FOR CALLING PROGRAMS>
0134+  6003             ;
0135+  6003             ; THESE VECTORS MAY BE USED BY USER WRITTEN
0136+  6003             ; PROGRAMS TO SIMPLIFY THE HANDLING OF I/O
0137+  6003             ; FROM SYSTEM TO SYSTEM.  WHATEVER THE CURRENT
0138+  6003             ; ASSIGNED DEVICE, THESE VECTORS WILL PERFORM
0139+  6003             ; THE REQUIRED I/O OPERATION, AND RETURN TO
0140+  6003             ; THE CALLING PROGRAM.  (RET)
0141+  6003             ;
0142+  6003             ; THE REGISTER CONVENTION USED FOLLOWS-
0143+  6003             ;
0144+  6003             ; ANY INPUT OR OUTPUT DEVICE
0145+  6003             ;	CHARACTER TO BE OUTPUT IN 'C' REGISTER.
0146+  6003             ;	CHARACTER WILL BE IN 'A' REGISTER UPON
0147+  6003             ;	RETURNING FROM AN INPUT OR OUTPUT.
0148+  6003             ; 'CSTS'-
0149+  6003             ;	RETURN TRUE (0FFH IN 'A' REG.) IF THERE IS
0150+  6003             ;	SOMETHING WAITING, AND ZERO (00) IF NOT.
0151+  6003             ; 'IOCHK'-
0152+  6003             ;	RETURN WITH THE CURRENT I/O CONFIGURATION
0153+  6003             ;	BYTE IN 'A' REGISTER.
0154+  6003             ; 'IOSET'-
0155+  6003             ;	ALLOWS A PROGRAM TO DYNAMICALLY ALTER THE
0156+  6003             ;	CURRENT I/O CONFIGURATION, AND REQUIRES
0157+  6003             ;	THE NEW BYTE IN 'C' REGISTER.
0158+  6003             ; 'MEMCK'-
0159+  6003             ;	RETURNS WITH THE HIGHEST ALLOWED USER
0160+  6003             ;	MEMORY LOCATION. 'B'=HIGH BYTE, 'A'=LOW.
0161+  6003             ; 'TRAP'-
0162+  6003             ;	THIS IS THE 'BREAKPOINT' ENTRY POINT,
0163+  6003             ;	BUT MAY BE 'CALLED'. IT WILL SAVE
0164+  6003             ;	THE MACHINE STATE. RETURN CAN BE MADE WITH
0165+  6003             ;	A SIMPLE 'G[CR]' ON THE CONSOLE.
0166+  6003             ;
0167+  6003 C3 F5 65    	JP	CI	     ;CONSOLE INPUT
0168+  6006 C3 15 66    	JP	RI	     ;READER INPUT
0169+  6009 C3 74 64    	JP	CO	     ;CONSOLE OUTPUT
0170+  600C C3 B0 64    	JP	PUO	     ;PUNCH OUTPUT
0171+  600F C3 96 64    	JP	LO	     ;LIST OUTPUT
0172+  6012 C3 08 65    	JP	CSTS	     ;CONSOLE STATUS
0173+  6015 C3 06 61    	JP	IOCHK	     ;I/O CHECK
0174+  6018 C3 01 61    	JP	IOSET	     ;I/O SET
0175+  601B C3 9B 65    	JP	MEMCK	     ;MEMORY LIMIT CHECK
0176+  601E C3 92 66    TRAP:	JP	RESTART	     ;BREAKPOINT
0177+  6021             ;
0178+  6021             ;	ANNOUNCEMENT OF MONITOR NAME & VERSION
0179+  6021 0D 0A 00 00 MSG:	DB	CR,LF,FIL,FIL,FIL
0179+  6025 00 
0180+  6026 5A 61 70 70 	DB	"Zapple V"	; WW: CHANGED TO DQUOTES
0180+  602A 6C 65 20 56 
0181+  602E 31 2E 31    	DB	"1.1"		; WW: CHANGED TO DQUOTES
0182+  6031             MSGL:	EQU	$-MSG
0183+  6031             ;
0184+  6031             ;	LET US BEGIN
0185+  6031             ;
0186+  6031             ;
0187+  6031             ; *NOTE- THE CODE UP TO THE 'IN SENSE' MAY
0188+  6031             ; BE REPLACED BY ENOUGH CODE TO INITIALIZE
0189+  6031             ; AN ACIA OR SIO DEVICE. ADDITIONAL DEVICES
0190+  6031             ; MAY BE INITIALIZED USING THE 'Q' COMMAND.
0191+  6031             ; (OR STANDARD ROUTINES FOR INITILIZATION
0192+  6031             ; MAY BE LOADED & EXECUTED IN THE USER AREA).
0193+  6031             ;
0194+  6031             BEGIN:	;WW	LD	A,NN	     ;FOR  'I' REG. IF NEEDED.
0195+  6031             	;WW	LD	I,A
0196+  6031             	;WW	NOP		     ;SPARE BYTE
0197+  6031             	;WW	XOR	A	     ;CLEAR READER CONTROL PORT
0198+  6031             	;WW	OUT	RCP,A
0199+  6031             ;
0200+  6031             	;WW	IN	A,SENSE	     ;INITIALIZE I/O CONFIGURARTION
0201+  6031 3E FF       	LD	A,$FF		; WW - INIT IOBYT TO $FF (NOTE IT IS INVERTED WHEN USED)
0202+  6033 D3 97       	OUT	IOBYT,A
0203+  6035 31 39 60    	LD	SP,AHEAD-4   ;SET UP A FAKE STACK
0204+  6038 C3 A9 65    	JP	MEMSIZ+1     ;GET MEMORY SIZE
0205+  603B 3D 60       	DEFW	AHEAD
0206+  603D F9          AHEAD:	LD	SP,HL	     ;SET TRUE STACK
0207+  603E EB          	EX	DE,HL
0208+  603F 01 23 00    	LD	BC,ENDX-EXIT
0209+  6042 21 7C 67    	LD	HL,EXIT
0210+  6045 ED B0       	LDIR		     ;MOVE TO RAM
0211+  6047 EB          	EX	DE,HL
0212+  6048 01 A1 FF    	LD	BC,-5FH	     ;SET UP A USER'S STACK VALUE
0213+  604B 09          	ADD	HL,BC
0214+  604C E5          	PUSH	HL	     ;PRE-LOAD USER'S STACK VALUE
0215+  604D 21 00 00    	LD	HL,0	     ;INITIALIZE OTHER REGISTERS
0216+  6050 06 0A       	LD	B,10	     ; (16 OF THEM)
0217+  6052 E5          STKIT:	PUSH	HL	     ; TO ZERO
0218+  6053 10 FD       	DJNZ	STKIT
0219+  6055 06 10       HELLO:	LD	B,MSGL		;SAY HELLO TO THE FOLKS
0220+  6057 CD 39 64    	CALL	TOM	     ;OUTPUT SIGN-ON MSG
0221+  605A C3 00 10    	JP	$1000		; WW: AUTOSTART USER ROUTINE
0222+  605D 11 5D 60    START:	LD	DE,START     ;MAIN 'WORK' LOOP
0223+  6060 D5          	PUSH	DE	     ;SET UP A RETURN TO HERE
0224+  6061 CD 00 65    	CALL	CRLF
0225+  6064 0E 3E       	LD	C,'>'
0226+  6066 CD 74 64    	CALL	CO
0227+  6069 CD 0A 67    STARO:	CALL	TI	     ;GET A CONSOLE CHARACTER
0228+  606C E6 7F       	AND	7FH	     ;IGNORE NULLS
0229+  606E 28 F9       	JR	Z,STARO	     ;GET ANOTHER
0230+  6070 D6 41       	SUB	'A'	     ;QUALIFY THE CHARACTER
0231+  6072 F8          	RET	M	     ;<A
0232+  6073 FE 1A       	CP	'Z'-'A'+1
0233+  6075 D0          	RET	NC	     ;>Z
0234+  6076 87          	ADD	A	     ;A*2
0235+  6077 06 00       	LD	B,0
0236+  6079 4F          	LD	C,A	     ;POINT TO PLACE ON TABLE
0237+  607A 21 85 60    	LD	HL,TBL	     ;POINT TO COMMAND TABLE
0238+  607D 09          	ADD	HL,BC	     ;ADD IN DISPLACEMENT
0239+  607E 5E          	LD	E,(HL)
0240+  607F 23          	INC	HL
0241+  6080 56          	LD	D,(HL)
0242+  6081 EB          	EX	DE,HL	     ;D&E=ROUTINE ADDRESS
0243+  6082 0E 02       	LD	C,2	     ;SET C UP
0244+  6084 E9          	JP	(HL)	     ;GO EXECUTE COMMAND
0245+  6085             ;
0246+  6085             ;		<COMMAND BRANCH TABLE>
0247+  6085             ;
0248+  6085             TBL:	
0249+  6085 B9 60       	DEFW	ASSIGN		    ;A - ASSIGN I/O
0250+  6087 0B 61       	DEFW	BYE		    ;B - SYSTEM SHUT-DOWN
0251+  6089 38 61       	DEFW	COMP		    ;C - COMPARE MEMORY VS. READER INPUT
0252+  608B 59 61       	DEFW	DISP		    ;D - DISPLAY MEMORY ON CONS. IN HEX
0253+  608D 70 61       	DEFW	EOF		    ;E - END OF FILE TAG FOR HEX DUMPS
0254+  608F 8C 61       	DEFW	FILL		    ;F - FILL MEMORY WITH A CONSTANT
0255+  6091 99 61       	DEFW	GOTO		    ;G - GOTO [ADDR] <,>BREAKPOINTS (2)
0256+  6093 6D 65       	DEFW	HEXN		    ;H - HEX MATH. <SUM>,<DIFFERENCE>
0257+  6095 4E 64       	DEFW	ERROR		    ;I * USER DEFINED, INSERT VECTOR
0258+  6097             ;	J=J		     ;VECTOR ADDR
0259+  6097 E7 61       	DEFW	TEST		    ;J - NON-DESTRUCTIVE MEMORY TEST
0260+  6099 4E 64       	DEFW	ERROR		    ;K * USER DEFINED, INSERT VECTOR
0261+  609B             ;	J=J+3		     ;VECTOR ADDR
0262+  609B 55 66       	DEFW	LOAD		    ;L - MOVE A BINARY FORMAT FILE
0263+  609D 05 62       	DEFW	MOVE		    ;M - MOVE BLOCKS OF MEMORY
0264+  609F E5 64       	DEFW	NULL		    ;N - PUNCH NULLS ON PUNCH DEVICE
0265+  60A1 4E 64       	DEFW	ERROR		    ;O * USER DEFINED, INSERT VECTOR
0266+  60A3             ;	J=J+3		     ;VECTOR ADDR
0267+  60A3 19 61       	DEFW	PUTA		    ;P - 'PUT' ASCII INTO MEMORY.
0268+  60A5 2B 67       	DEFW	QUERY		    ;Q - QI(N)=DISP. N; QO(N,V)=OUT N,V
0269+  60A7 10 62       	DEFW	READ		    ;R - READ A HEX FILE (W/CHECKSUMS)
0270+  60A9 C9 62       	DEFW	SUBS		    ;S - SUBSTITUTE &/OR EXAMINE MEMORY
0271+  60AB F2 62       	DEFW	TYPE		    ;T - TYPE MEMORY IN ASCII
0272+  60AD CD 64       	DEFW	UNLD		    ;U - MEMORY TO PUNCH (BINARY FORMAT)
0273+  60AF 56 67       	DEFW	VERIFY		    ;V - COMPARE MEMORY AGAINST MEMORY
0274+  60B1 5A 63       	DEFW	WRITE		    ;W - MEMORY TO PUNCH (HEX FORMAT)
0275+  60B3 9A 63       	DEFW	XAM		    ;X - EXAMINE & MODIFY CUP REGISTERS
0276+  60B5 12 63       	DEFW	WHERE		    ;Y - FIND SEQUENCE OF BYTES IN RAM
0277+  60B7 65 64       	DEFW	SIZE		    ;Z - ADDRESS OF LAST R/W LOCATION
0278+  60B9             ;
0279+  60B9             ;
0280+  60B9             ;
0281+  60B9             ;	THIS ROUTINE CONTROLS THE CONFIGURATION
0282+  60B9             ; OF THE VARIOUS I/O DRIVERS & DEVICES. THIS IS
0283+  60B9             ; ACCOMPLISHED VIA A HARDWARE READ/WRITE PORT.
0284+  60B9             ;	THIS PORT IS INITIALIZED UPON SIGN-ON
0285+  60B9             ; BY THE VALUE READ ON PORT 'SENSE'. IF MAY BE
0286+  60B9             ; DYNAMICALLY MODIFIED THROUGH CONSOLE COMMANDS.
0287+  60B9             ;
0288+  60B9             ; THE VALUE ON THE 'IOBYT' PORT REPRESENTS THE
0289+  60B9             ; CURRENT CONFIGURATION.  IT IS STURCTURED THUSLY:
0290+  60B9             ;
0291+  60B9             ; 000000XX - WHERE XX REPRESENTS THE CURRENT CONSOLE
0292+  60B9             ; 0000XX00 - WHERE XX REPRESENTS THE CURRENT READER
0293+  60B9             ; 00XX0000 - WHERE XX REPRESENTS THE CURRENT PUNCH
0294+  60B9             ; XX000000 - WHERE XX REPRESENTS THE CURRENT LISTER
0295+  60B9             ;
0296+  60B9             ; WHEN USING A MEMORY LOCATION FOR IOBYT, THE
0297+  60B9             ; POLARITY IS REVERSED.  FOR AN I/O PORT,
0298+  60B9             ; WHEN XX = 11, THE DEVICE IS ALWAYS THE
0299+  60B9             ; TELEPRINTER.  WHEN XX = 00, THE DEVICE IS ALWAYS
0300+  60B9             ; USER DEFINED.  SEE OPERATOR'S MANUAL FOR FURTHER
0301+  60B9             ; DETAILS.
0302+  60B9             ;
0303+  60B9 CD 0A 67    ASSIGN:	CALL	TI	     ;GET DEVICE NAME
0304+  60BC 21 68 67    	LD	HL,LTBL	     ;POINT TO DEVICE TABLE
0305+  60BF 01 00 04    	LD	BC,400H	     ;4 DEVICES TO LOOK FOR
0306+  60C2 11 05 00    	LD	DE,5	     ;4 DEV. + IDENT.
0307+  60C5 BE          ..A0:	CP	(HL)	     ;LOOK FOR MATCH
0308+  60C6 28 06       	JR	Z,..A1
0309+  60C8 19          	ADD	HL,DE	     ;GO THRU TABLE
0310+  60C9 0C          	INC	C	     ;KEEP TRACK OF DEVICE
0311+  60CA 10 F9       	DJNZ	..A0
0312+  60CC 18 15       	JR	..ERR	     ;WRONG IDENTIFIER
0313+  60CE 59          ..A1:	LD	E,C	     ;SAVE DEVICE NUMBER
0314+  60CF CD 0A 67    ..A2:	CALL	TI	     ;SCAN PAST '='
0315+  60D2 FE 3D       	CP	'='
0316+  60D4 20 F9       	JR	NZ,..A2
0317+  60D6 CD 0A 67    	CALL	TI	     ;GET NEW ASSIGNMENT
0318+  60D9 01 00 04    	LD	BC,400H	     ;4 POSSIBLE ASSIGNMENTS
0319+  60DC 23          ..A3:	INC	HL	     ;POINT TO ASSIGNMENT NAME
0320+  60DD BE          	CP	(HL)	     ;LOOK FOR PROPER MATCH
0321+  60DE 28 06       	JR	Z,..A4	     ;MATCH FOUND
0322+  60E0 0C          	INC	C	     ;KEEP TRACK OF ASSIGNMENT NMBR
0323+  60E1 10 F9       	DJNZ	..A3
0324+  60E3 C3 4E 64    ..ERR:	JP	ERROR	     ;NO MATCH, ERROR
0325+  60E6 3E 03       ..A4:	LD	A,3	     ;SET UP A MASK
0326+  60E8 1C          	INC	E
0327+  60E9 1D          ..A5:	DEC	E	     ;DEVICE IN E
0328+  60EA 28 08       	JR	Z,..A6	     ;GOT IT
0329+  60EC CB 21       	SLA	C	     ;ELSE MOVE MASKS
0330+  60EE CB 21       	SLA	C
0331+  60F0 17          	RLA	
0332+  60F1 17          	RLA		     ;A=DEVICE MASK
0333+  60F2 18 F5       	JR	..A5
0334+  60F4 2F          ..A6:	CPL		     ;INVERT FOR AND'ING
0335+  60F5 57          	LD	D,A	     ;SAVE IN D
0336+  60F6 CD E6 65    ..A7:	CALL	PCHK	     ;WAIT FOR [CR]
0337+  60F9 30 FB       	JR	NC,..A7
0338+  60FB CD 06 61    	CALL	IOCHK	     ;GET PRESENT CONFIGURATION
0339+  60FE A2          	AND	D	     ;MODIFY ONLY SELECTED DEVICE
0340+  60FF B1          	OR	C	     ;'OR' NEW BIT PATTERN
0341+  6100 4F          	LD	C,A	     ;NEW CONFIGURATION
0342+  6101             ;
0343+  6101             ; THIS ALLOWS USER PROGRAMS TO MODIFY
0344+  6101             ; THE I/O CONDIGURATIMN DYNAMICALLY
0345+  6101             ; DURING EXECUTION.
0346+  6101             ;
0347+  6101 79          IOSET:	LD	A,C	     ;NEW I/O BYTE PASSED IN C REE
0348+  6102 2F          	CPL		     ;WE SAVE THE INVERTED BYTE
0349+  6103 D3 97       	OUT	IOBYT,A	     ;IN AN I/O PORT LATCH
0350+  6105 C9          	RET	
0351+  6106             ;
0352+  6106             ; THIS RETURNS THE CURRENT I/O
0353+  6106             ; CONFIGURATION IN THEE A REG.
0354+  6106             ;
0355+  6106 DB 97       IOCHK:	IN	A,IOBYT	     ;GET SAVED VALUE
0356+  6108 2F          	CPL		     ;AND INVERT IT AGAIN
0357+  6109 AF          	XOR	A		; WW
0358+  610A C9          	RET	
0359+  610B             ;
0360+  610B             ;
0361+  610B             ; THIS ROUTINE IS USED AS A SIMPLE MEANS TO PREVENT
0362+  610B             ; UNAUTHORIZED SYSTEM OPERATION. THE SYSTEM LOCKS UP,
0363+  610B             ; MONITORING FOR A 'CONT.-SHIFT-N', AT WHICH TIME IT
0364+  610B             ; WILL SIGN-ON AGAIN. NO REGISTER ASSIGHNMENTS OR I/O
0365+  610B             ; CONFIGURATIONS WILL BE ALTERED.
0366+  610B             ;
0367+  610B CD 00 65    BYE:	CALL	CRLF
0368+  610E CD 04 67    ..BY:	CALL	KI
0369+  6111 FE 1E       	CP	1EH	     ;CONTROL-SHIFT-N
0370+  6113 20 F9       	JR	NZ,..BY
0371+  6115 D1          	POP	DE	     ;REMOVE THE RETURN
0372+  6116 C3 55 60    	JP	HELLO	     ;AND SIGN-ON AGAIN
0373+  6119             ;
0374+  6119             ; THIS ALLOW ENTERING OF ASCII TEXT INTO MEMORY
0375+  6119             ; FROM THE CONSOLE DEVICE. THE PARITY BIT IS CLEARED,
0376+  6119             ; AND ALL WILL BE STORED EXCEPT THE BACK-ARROR [ ]
0377+  6119             ; WHICH DELETES THE PREVIOUS CHARACTER, AND
0378+  6119             ; CONTROL-D, WHICH RETURNS CONTROL TO THE MONITOR.
0379+  6119             ; THIS COMMAND, COMBINED WITH THE 'Y' COMMAND,
0380+  6119             ; PROVIDES A RUDIMENTARY TEXT PROCESSING ABILITY.
0381+  6119             ;
0382+  6119 CD 2F 65    PUTA:	CALL	EXPR1	     ;GET THE STARTING ADDR.
0383+  611C CD 00 65    	CALL	CRLF
0384+  611F E1          	POP	HL
0385+  6120 CD 04 67    ...A1:	CALL	KI	     ;GET A CHARACTER
0386+  6123 FE 04       	CP	4	     ;CONTROL-D? (EOT)
0387+  6125 CA 6C 64    	JP	Z,LFADR	     ;YES, STOP & PRINT
0388+  6128 FE 5F       	CP	5FH	     ;ERASE MISTAKE?
0389+  612A 28 08       	JR	Z,...A3	     ; YES.
0390+  612C 77          	LD	(HL),A	     ;ELSE STORE IT IN MEMORY
0391+  612D 4F          	LD	C,A
0392+  612E 23          	INC	HL
0393+  612F CD 74 64    ...A2:	CALL	CO	     ;ECHO ON CONSOLE
0394+  6132 18 EC       	JR	...A1
0395+  6134 2B          ...A3:	DEC	HL
0396+  6135 4E          	LD	C,(HL)
0397+  6136 18 F7       	JR	...A2	     ;ECHO & CONTINUE
0398+  6138             ;
0399+  6138             ; THIS ROUTINE COMPARES THE READER INPUT
0400+  6138             ; DEVICE WITH THE MEMORY BLOCK SPECIFIED.
0401+  6138             ; IT TESTS ALL EIGHT BITS, AND ANY DISCREPENCIES
0402+  6138             ; WILL BE OUTPUT TO THE CONSOLE. THIS IS USEFUL
0403+  6138             ; WHEN USED WITH THE BINARY DUMP DORMAT TO BOTH
0404+  6138             ; VERIFY PROPER READING & STORAGE, OR TO DETECT
0405+  6138             ; PROGRAM CHANGES SINCE IT WAS LAST LOADED.
0406+  6138             ;
0407+  6138 CD FB 64    COMP:	CALL	EXLF	     ;GET START ' STOP ADDR.
0408+  613B CD 5E 64    ..C:	CALL	RIFF	     ;GET A FULL READER BYTE
0409+  613E BE          	CP	(HL)	     ;8 BIT COMPARE
0410+  613F C4 47 61    	CALL	NZ,CERR	     ;CALL IF INVALID COMPARE
0411+  6142 CD 5D 65    	CALL	HILOX	     ;SEE IF RANGE SATISFIED
0412+  6145 18 F4       	JR	..C
0413+  6147             ;
0414+  6147             ; THIS SUBROUTINE IS USED TO DISPLAY THE
0415+  6147             ; CURRENT LOCATION OF THE 'M' REGISTER POINTER (HL) ,
0416+  6147             ; AND THE VALUE AT THE LOCATION, AND THE CONTENTS
0417+  6147             ; OF THE ACCUMULATOR.  USED BY TWO ROUTINES.
0418+  6147             ;
0419+  6147 47          CERR:	LD	B,A	     ;SAVE ACC.
0420+  6148 CD 6F 64    	CALL	HLSP	     ;DISPLAY H&L
0421+  614B 7E          	LD	A,(HL)
0422+  614C CD 7E 65    	CALL	LBYTE	     ;PRINT 'M'
0423+  614F CD 72 64    	CALL	BLK	     ;SPACE OVER
0424+  6152 78          	LD	A,B
0425+  6153 CD 7E 65    	CALL	LBYTE	     ;PRINT ACC.
0426+  6156 C3 00 65    	JP	CRLF	     ;CRLF & RETURN
0427+  6159             ;
0428+  6159             ; THIS DISPLAYS THE CONTENTS OF MEMORY IN BASE HEX
0429+  6159             ; WITH THE STARTING LOCATION ON EACH LINE. (BETWEEN
0430+  6159             ; THE TWO PARAMEETERS GIVEN). 16 BYTES PER LINE MAX.
0431+  6159             ;
0432+  6159 CD FB 64    DISP:	CALL	EXLF	     ;GET DISPLAY RANGE
0433+  615C CD 6C 64    ..D0:	CALL	LFADR	     ;CRLF & PRINT ADDR.
0434+  615F CD 72 64    ..D1:	CALL	BLK	     ;SPACE OVER
0435+  6162 7E          	LD	A,(HL)
0436+  6163 CD 7E 65    	CALL	LBYTE
0437+  6166 CD 5D 65    	CALL	HILOX	     ;RANGE CHECK
0438+  6169 7D          	LD	A,L
0439+  616A E6 0F       	AND	0FH	     ;SEE IF TIME TO CRLF
0440+  616C 20 F1       	JR	NZ,..D1
0441+  616E 18 EC       	JR	..D0
0442+  6170             ;
0443+  6170             ; THIS OUTPUTS THE END OF FILE (EOF) PATTERN
0444+  6170             ; FOR THE CHECKSUM LOADER.  IT IS USED AFTER
0445+  6170             ; PUNCHING A BLOCK OF MEMORY WITH THE 'W'
0446+  6170             ; COMMAND.  AN ADDRESS PARAMETER MAY BE GIVEN,
0447+  6170             ; AND UPON READING, THIS ADDRESS WILL BE
0448+  6170             ; AUTOMATICALLY PLACED INT THE 'P' COUNTER. THE
0449+  6170             ; PROGRAM CAN THEN BE RUN WITH A SIMPLE 'G[CR]'
0450+  6170             ; COMMAND.
0451+  6170             ;
0452+  6170 CD 2F 65    EOF:	CALL	EXPR1	     ;GET OPTIONAL ADDR.
0453+  6173 CD A9 64    	CALL	PEOL	     ;CRLF TO PUNCH
0454+  6176 0E 3A       	LD	C,':'	     ;FILE MARKER CUE
0455+  6178 CD B0 64    	CALL	PUO
0456+  617B AF          	XOR	A	     ;ZERO LENGTH
0457+  617C CD CA 65    	CALL	PBYTE
0458+  617F E1          	POP	HL
0459+  6180 CD C5 65    	CALL	PADR	     ;PUNCH OPTIONAL ADDR.
0460+  6183 21 00 00    	LD	HL,0	     ;FILE TYPE=0
0461+  6186 CD C5 65    	CALL	PADR	     ;PUNCH IT
0462+  6189 C3 E5 64    	JP	NULL	     ;TRAILER  & RETURN
0463+  618C             ;
0464+  618C             ; THIS COMMAND WILL FILL A BLOCK OF MEMORY
0465+  618C             ; WITH A VALUE.  IE; FO,1FFF,0 FILLS FROM
0466+  618C             ; <1> TO <2> WITH THE BYTE <3>. HANDY FOR
0467+  618C             ; INITIALIZING A BLOCK TO A SPECIFIC VALUE, OR
0468+  618C             ; MEMORY TO A CONSTANT VALUE BEFOR LOADING
0469+  618C             ; A PROGRAM.  (ZERO IS ESPECIALLY USEFUL.)
0470+  618C             ;
0471+  618C CD 24 65    FILL:	CALL	EXPR3	     ;GET 3 PARAMEETERS
0472+  618F 71          ..F:	LD	(HL),C	     ;STORE THE BYTE
0473+  6190 CD 63 65    	CALL	HILO
0474+  6193 30 FA       	JR	NC,..F
0475+  6195 D1          	POP	DE	     ;RESTORE STACK
0476+  6196 C3 5D 60    	JP	START	     ; IN CASE OF ACCIDENTS
0477+  6199             ;
0478+  6199             ; THIS COMMAND ALLOWS EXECUTION OF ANOTHER
0479+  6199             ; PROGRAM WHILE RETAINING SOME MONITOR
0480+  6199             ; CONTROL BY SETTING BREAKPOINTS.
0481+  6199             ;
0482+  6199             ; TO SIMPLY EXECUTE, TYPE 'G<ADDR>[CR]'. TO SET
0483+  6199             ; A BREAKPOINT TRAP, ADD THE ADDRESS (ES) TO THE
0484+  6199             ; COMMAND.  IE; G<ADDR>,<BKPT>[CR]. TWO BREAKPOINTS
0485+  6199             ; ARE ALLOWED, ENOUGH TO SATISFY MOST REQUIREMENTS.
0486+  6199             ; ONCE A BREAKPOINT HAS BEEN REACHED, THE
0487+  6199             ; REGISTERS MAY BE EXAMINED OR MODIFIED.  THE
0488+  6199             ; PROGRAM CAN THEN BE CONTINUED BY TYPING ONLY
0489+  6199             ; A 'G[CR]'. OR ANOTHER BREAKPOINT COULD BE
0490+  6199             ; IMPLEMENTED AT THAT TIME BY TYPING 'G,<BKPT>[CR]'.
0491+  6199             ;
0492+  6199             ; *NOTE: THIS IS SOFTWARE CONTROLLED, AND THE
0493+  6199             ; BREAKPOINT MUST OCCUR ON AN INSTRUCTION
0494+  6199             ; BYTE.
0495+  6199             ;
0496+  6199 CD E6 65    GOTO:	CALL	PCHK	     ;GET A POSSIBLE ADDRESS
0497+  619C 38 40       	JR	C,..G3	     ;CR ENTERED
0498+  619E 28 10       	JR	Z,..G0	     ;DELIMETER ENTERED
0499+  61A0 CD 56 65    	CALL	EXF	     ;GET ONE EXPRESSION
0500+  61A3 D1          	POP	DE
0501+  61A4 21 34 00    	LD	HL,PLOC	     ;PLACE ADDRESS IN 'P' LOCATION
0502+  61A7 39          	ADD	HL,SP
0503+  61A8 72          	LD	(HL),D	     ;HIGH BYTE
0504+  61A9 2B          	DEC	HL
0505+  61AA 73          	LD	(HL),E	     ;LOW BYTE
0506+  61AB 78          	LD	A,B
0507+  61AC FE 0D       	CP	CR	     ;SEE IF LAST CHARACTER WAS A CR
0508+  61AE 28 2E       	JR	Z,..G3	     ;YES, LEAVE
0509+  61B0 16 02       ..G0:	LD	D,2	     ;TWO BREAKPOINTS MAX
0510+  61B2 21 35 00    	LD	HL,TLOC	     ;POINT TO TRAP STORAGE
0511+  61B5 39          	ADD	HL,SP
0512+  61B6 E5          ..G1:	PUSH	HL	     ;SAVE STORAGE POINTER
0513+  61B7 CD 2F 65    	CALL	EXPR1	     ;GET A TRAP ADDRESS
0514+  61BA 58          	LD	E,B	     ;SAVE DELIMITER
0515+  61BB C1          	POP	BC	     ;TRAP ADDR.
0516+  61BC E1          	POP	HL	     ;STORAGE
0517+  61BD 78          	LD	A,B	     ;LOOK AT TRAP ADDR
0518+  61BE B1          	OR	C
0519+  61BF 28 0A       	JR	Z,..G2	     ;DON'T SET A TRAP AT 0
0520+  61C1 71          	LD	(HL),C	     ;SAVE BKPT ADDR
0521+  61C2 23          	INC	HL
0522+  61C3 70          	LD	(HL),B
0523+  61C4 23          	INC	HL
0524+  61C5 0A          	LD	A,(BC)	     ;PICK UP INST. BYTE
0525+  61C6 77          	LD	(HL),A	     ;SAVE THAT TOO
0526+  61C7 23          	INC	HL
0527+  61C8             ;	LD	A,0FFH	     ;RST 7
0528+  61C8 3E F7       	LD	A,0F7H	     ;RST 6
0529+  61CA 02          	LD	(BC),A	     ;SOFTWARE INTERUPT
0530+  61CB 7B          ..G2:	LD	A,E	     ;LOOK AT DEELIMITER
0531+  61CC FE 0D       	CP	CR
0532+  61CE 28 03       	JR	Z,..G2A
0533+  61D0 15          	DEC	D	     ;COUNT BKPTS
0534+  61D1 20 E3       	JR	NZ,..G1	     ;GET ONE MORE
0535+  61D3 3E C3       ..G2A:	LD	A,0C3H	     ;SET UP JUMP INSTRUCTION
0536+  61D5 32 30 00    	LD	(RST),A     ; AT RESTART TRAP LOC.
0537+  61D8 21 1E 60    	LD	HL,TRAP	     ; TO MONITOR VECTOR
0538+  61DB 22 31 00    	LD	(RST+1),HL
0539+  61DE CD 00 65    ..G3:	CALL	CRLF
0540+  61E1 D1          	POP	DE	     ;CLEAR SYSTEM RETURN
0541+  61E2 21 16 00    	LD	HL,22	     ;FIND 'EXIT' ROUTINE
0542+  61E5 39          	ADD	HL,SP	     ;UP IN STACK
0543+  61E6 E9          	JP	(HL)	     ;GO SOMPLACE
0544+  61E7             ;
0545+  61E7             ; THIS IS A 'QUICKIE' MEMORY TEST TO SPOT
0546+  61E7             ; HARD MEMORY FAILURES, OR ACCIDENTLY
0547+  61E7             ; PROTECTED MEEMORY LOCATIONS.  IT IS NOT
0548+  61E7             ; MEANT TO BE THE DEFINITIVE MEMORY DIAGNOSTIC.
0549+  61E7             ; IT IS, HOWEVER, NON-DESTRUCTIVEE.  ERRORS ARE
0550+  61E7             ; PRINTED ON THE CONSOLE AS FOLLOWS-
0551+  61E7             ; <ADDR> 00000100 WHERE <1> IS THE BAD BIT.
0552+  61E7             ; BIT LOCATION OF THE FAILURE IS EASILY
0553+  61E7             ; DETERMINED.  NON-R/W MEMORY WILL RETURN
0554+  61E7             ; WITH- 11111111
0555+  61E7             ;
0556+  61E7 CD FB 64    TEST:	CALL	EXLF	     ;GET TWO PARAMS
0557+  61EA 7E          ...T1:	LD	A,(HL)	     ;READ A BYTE
0558+  61EB 47          	LD	B,A	     ;SAVE IN B REG.
0559+  61EC 2F          	CPL	
0560+  61ED 77          	LD	(HL),A	     ;READ/COMPLIMENT/WRITE
0561+  61EE AE          	XOR	(HL)	     ; & COMPARE
0562+  61EF 28 0E       	JR	Z,...T2	     ;SKIP IF ZERO (OK)
0563+  61F1 D5          	PUSH	DE	     ;SAVE END POINTER
0564+  61F2 50          	LD	D,B	     ;SAVE BYTE
0565+  61F3 5F          	LD	E,A	     ;SET-UP TO DISPLAY
0566+  61F4 CD 6F 64    	CALL	HLSP	     ;PRINT BAD ADDR
0567+  61F7 CD 3D 67    	CALL	BITS	     ;PRINT BAD BIT LOC.
0568+  61FA CD 00 65    	CALL	CRLF
0569+  61FD 42          	LD	B,D	     ;RESTORE BYTE
0570+  61FE D1          	POP	DE	     ;RESTORE DE
0571+  61FF 70          ...T2:	LD	(HL),B	     ;REPLACE BYTE
0572+  6200 CD 5D 65    	CALL	HILOX	     ;RANGE TEST
0573+  6203 18 E5       	JR	...T1
0574+  6205             ;
0575+  6205             ; THIS COMMAND MOVES MASS AMOUNTS OF MEMORY
0576+  6205             ; FROM <1> THRU <2> TO THE ADDRESS STARTING
0577+  6205             ; AT <3>.  THIS ROUTINE SHOULD BE USED WITH
0578+  6205             ; SOME CAUTION, AS IT COULD SMASH MEMORY IF
0579+  6205             ; CARLESSLY IMPLEMENTED.
0580+  6205             ;
0581+  6205             ;	M<1>,<2>,<3>
0582+  6205             ;
0583+  6205 CD 24 65    MOVE:	CALL	EXPR3	     ;GET 3 PARAMTERS
0584+  6208 7E          ..M:	LD	A,(HL)	     ;PICK UP
0585+  6209 02          	LD	(BC),A	     ;PUT DOWN
0586+  620A 03          	INC	BC	     ;MOVE UP
0587+  620B CD 5D 65    	CALL	HILOX	     ;CHECK IF DONE
0588+  620E 18 F8       	JR	..M
0589+  6210             ;
0590+  6210             ; THIS COMMAND READS THE CHECK-SUMMED HEX FILES
0591+  6210             ; FOR BOTH THE NORMAL INTEL FORMAT AND THE TDL
0592+  6210             ; RELOCATING FORMAT.  ON BOTH FILES, A 'BIAS' MAY
0593+  6210             ; BE ADDED, WHICH WILL CAUSE THE OBJECT CODE TO
0594+  6210             ; BE PLACED IN A LOCATION OTHER THAN ITS
0595+  6210             ; INTENDED EXECUTION LOCATION.   THE BIAS IS ADDED
0596+  6210             ; TO WHAT WOULD HAVE BEEN THE NORMAL LOADING
0597+  6210             ; LOCATION, AND WILL WRAP AROUND TO ENABLE
0598+  6210             ; LOADING ANY PROGRAM ANYWHERE IN MEMORY.
0599+  6210             ;
0600+  6210             ; WHEN LOADING A RELOCATABLE FILE, AN ADDITIONAL
0601+  6210             ; PARAMETER MAY BE ADDED, WHICH REPRESENTS THE
0602+  6210             ; ACTUAL EXECUTION ADDRESS DESIRED.  THIS ALSO MAY
0603+  6210             ; BE ANY LOCATION IN MEMORY.
0604+  6210             ;
0605+  6210             ; EXAMPLES:
0606+  6210             ;
0607+  6210             ; R[CR] =0 BIAS, 0 EXECUTION ADDR.
0608+  6210             ; R<ADDR1>[CR] =<1>BIAS, 0 EXECUTION ADDR.
0609+  6210             ; R,<ADDR1>[CR] =0 BIAS, <1> EXECUTION ADDR.
0610+  6210             ; R<ADDR1>,<ADDR2>[CR] =<1>BIAS, <2>EXECUTION ADDR.
0611+  6210             ;
0612+  6210 CD 2F 65    READ:	CALL	EXPR1	     ;GET BIAS, IF ANY
0613+  6213 78          	LD	A,B	     ;LOOK AT DELIMITER
0614+  6214 D6 0D       	SUB	CR	     ;ALL DONE?
0615+  6216 47          	LD	B,A	     ;SET UP RELOCATION OF 0
0616+  6217 4F          	LD	C,A	     ; IF CR ENTERED
0617+  6218 D1          	POP	DE	     ;BIAS AMOUNT
0618+  6219 28 04       	JR	Z,..R0	     ;CR ENTERED
0619+  621B CD 2F 65    	CALL	EXPR1	     ;GET RELOCATION
0620+  621E C1          	POP	BC	     ;ACTUAL RELOCATION VALUE
0621+  621F EB          ..R0:	EX	DE,HL
0622+  6220 D9          	EXX		     ;HL'=BIAS, BC'=RELOCATION
0623+  6221 CD 00 65    	CALL	CRLF
0624+  6224 CD 4F 66    LOD0:	CALL	RIX	     ;GET A CHARACTER
0625+  6227 D6 3A       	SUB	':'	     ;ABSOLUTE FILE CUE?
0626+  6229 47          	LD	B,A	     ;SAVE CUE CLUE
0627+  622A E6 FE       	AND	0FEH	     ;KILL BIT 0
0628+  622C 20 F6       	JR	NZ,LOD0	     ; NO, KEEP LOOKING
0629+  622E 57          	LD	D,A	     ;ZERO CHECKSUM
0630+  622F CD AA 62    	CALL	SBYTE	     ;GET FILE LENGTH
0631+  6232 5F          	LD	E,A	     ;SAVE IN E REG.
0632+  6233 CD AA 62    	CALL	SBYTE	     ;GET LOAD MSB
0633+  6236 F5          	PUSH	AF	     ;SAVE IT
0634+  6237 CD AA 62    	CALL	SBYTE	     ;GET LOAD LSB
0635+  623A D9          	EXX		     ;CHANGE GEARS
0636+  623B D1          	POP	DE	     ;RECOVER MSB
0637+  623C 5F          	LD	E,A	     ;FULL LOAD ADDR
0638+  623D C5          	PUSH	BC	     ;BC'=RELOCATION
0639+  623E D5          	PUSH	DE	     ;DE'=LOAD ADDR
0640+  623F E5          	PUSH	HL	     ;HL'=BIAS
0641+  6240 19          	ADD	HL,DE	     ; BIAS+LOAD
0642+  6241 E3          	EX	(SP),HL	     ;RESTORE HL'
0643+  6242 DD E1       	POP	IX	     ; X=BIAS+LOAD
0644+  6244 D9          	EXX		     ;DOWNSHIFT
0645+  6245 E1          	POP	HL	     ;HL=LOAD ADDR
0646+  6246 CD AA 62    	CALL	SBYTE	     ;GET FILE TYPE
0647+  6249 3D          	DEC	A	     ;1=REL. FILE, 0=ABS.
0648+  624A 78          	LD	A,B	     ;SAVE CUE BIT
0649+  624B C1          	POP	BC	     ;BC=RELOCATION
0650+  624C 20 03       	JR	NZ,..A	     ;ABSOLUTE FILE
0651+  624E 09          	ADD	HL,BC	     ;ELSE RELMCATE
0652+  624F DD 09       	ADD	IX,BC	     ;BOTH X & HL
0653+  6251 1C          ..A:	INC	E	     ;TEST LENGHT
0654+  6252 1D          	DEC	E	     ;0=DONE
0655+  6253 28 19       	JR	Z,DONE
0656+  6255 3D          	DEC	A	     ;TEST CUE
0657+  6256 28 22       	JR	Z,LODR	     ;RELATIVE
0658+  6258 CD AA 62    ..LI:	CALL	SBYTE	     ;NEXT
0659+  625B CD BD 62    	CALL	STORE	     ;STORE IT
0660+  625E 20 1C       	JR	NZ,..L1	     ;MORE COMING
0661+  6260 CD AA 62    LOD4:	CALL	SBYTE	     ;GET CHECKSUM
0662+  6263 28 BF       	JR	Z,LOD0	     ;GOOD CHECKSUM
0663+  6265 DD E5       ERR3:	PUSH	IX
0664+  6267 E1          	POP	HL	     ;TRANSFER
0665+  6268 CD 79 65    	CALL	LADR	     ;PRINT CURRENT LOAD ADDR
0666+  626B C3 4E 64    ERR2:	JP	ERROR	     ;ABORT
0667+  626E 7C          DONE:	LD	A,H	     ;DON'T MODIFY IF ZERO
0668+  626F B5          	OR	L
0669+  6270 C8          	RET	Z
0670+  6271 EB          	EX	DE,HL	     ;ELSE STORE IN PC
0671+  6272 21 34 00    	LD	HL,PLOC
0672+  6275 39          	ADD	HL,SP
0673+  6276 72          	LD	(HL),D	     ;IN STACK AREA
0674+  6277 2B          	DEC	HL
0675+  6278 73          	LD	(HL),E
0676+  6279 C9          	RET	
0677+  627A 2E 01       LODR:	LD	L,1	     ;SET-UP BIT COUNTER
0678+  627C CD 9A 62    ..L1:	CALL	LODCB	     ;GET THE BIT
0679+  627F 38 07       	JR	C,..L3	     ;DOUBLE BIT
0680+  6281 CD BD 62    ..L5:	CALL	STORE	     ;WRITE IT
0681+  6284 20 F6       	JR	NZ,..L1
0682+  6286 18 D8       	JR	LOD4	     ;TEST CHECKSUM
0683+  6288 4F          ..L3:	LD	C,A	     ;SAVE LOW BYTE
0684+  6289 CD 9A 62    	CALL	LODCB	     ;NEXT CONTROL BIT
0685+  628C 47          	LD	B,A	     ;SAVE HIGH BYTE
0686+  628D D9          	EXX	
0687+  628E C5          	PUSH	BC	     ;GET RELOCATION
0688+  628F D9          	EXX	
0689+  6290 E3          	EX	(SP),HL	     ;INTO HL
0690+  6291 09          	ADD	HL,BC	     ;RELOCATE
0691+  6292 7D          	LD	A,L	     ;LOW BYTE
0692+  6293 CD BD 62    	CALL	STORE	     ;STORE IT
0693+  6296 7C          	LD	A,H	     ;HIGH BYTE
0694+  6297 E1          	POP	HL	     ;RESTORE HL
0695+  6298 18 E7       	JR	..L5	     ;DO THIS AGAIN
0696+  629A 2D          LODCB:	DEC	L	     ;COUNT BITS
0697+  629B 20 07       	JR	NZ,..LC1	     ;MORE LEFT
0698+  629D CD AA 62    	CALL	SBYTE	     ;GET NEXT
0699+  62A0 1D          	DEC	E	     ;COUNT BYTES
0700+  62A1 67          	LD	H,A	     ;SAVE THE BITS
0701+  62A2 2E 08       	LD	L,8	     ;8 BITS/BYTE
0702+  62A4 CD AA 62    ..LC1:	CALL	SBYTE	     ;GET A DATA BYTE
0703+  62A7 CB 24       	SLA	H	     ;TEST NEXT BIT
0704+  62A9 C9          	RET	
0705+  62AA C5          SBYTE:	PUSH	BC	     ;PRESERVE BC
0706+  62AB CD B2 65    	CALL	RIBBLE	     ;GET A CONVERTED ASCII CHAR.
0707+  62AE 07          	RLCA	
0708+  62AF 07          	RLCA	
0709+  62B0 07          	RLCA	
0710+  62B1 07          	RLCA		     ;MOV IT TO HIGH NIBBLE
0711+  62B2 4F          	LD	C,A	     ;SAVE IT
0712+  62B3 CD B2 65    	CALL	RIBBLE	     ;GET OTHER HALF
0713+  62B6 B1          	OR	C	     ;MAKE WHOLE
0714+  62B7 4F          	LD	C,A	     ;SAVE AGAIN IN C
0715+  62B8 82          	ADD	D	     ;UPDATE CHECKSUM
0716+  62B9 57          	LD	D,A	     ;NEW CHECKKSUM
0717+  62BA 79          	LD	A,C	     ;CONVERTED BYTE
0718+  62BB C1          	POP	BC
0719+  62BC C9          	RET	
0720+  62BD DD 77 00    STORE:	LD	(IX),A	     ;WRITE TO MEMORY
0721+  62C0 DD BE 00    	CP	(IX)	     ;VALID WRITE?
0722+  62C3 20 A0       	JR	NZ,ERR3	     ; NO.
0723+  62C5 DD 23       	INC	IX	     ;ADVANCE POINTER
0724+  62C7 1D          	DEC	E	     ;COUNT DOWN
0725+  62C8 C9          	RET	
0726+  62C9             ;
0727+  62C9             ; THIS ROUTINE ALLOWS BOTH INSPECTION OF &
0728+  62C9             ; MODIFICATION OF MEMORY ON A BYTE BY BYTE
0729+  62C9             ; BASIS. IT TAKES ONE ADDRESS PARAMETER,
0730+  62C9             ; FOLLOWED BY A SPACE.  THE DATA AT THAT
0731+  62C9             ; LOCATION WILL BE DISPLAYED.  IF IT IS
0732+  62C9             ; DESIRED TO CHANGE IT, THE VALUE IS THEN
0733+  62C9             ; ENTERED.  A FOLLOWING SPACE WILL DISPLAY
0734+  62C9             ; THE NEXT BYTE.  A CARRIAGE RETURN [CR]
0735+  62C9             ; WILL TERMINATE THE COMMAND.  THE SYSTEM
0736+  62C9             ; ADDS A CRLF AT LOCATIONS ENDING WITH EITHER
0737+  62C9             ; XXX0 OR XXX8 TO AID IN DTERMINING THE
0738+  62C9             ; PRESENT ADDRESS, IT IS PRINTED AFTER
0739+  62C9             ; EACH CRLF.  A BACKARROW [ ] WILL BACK
0740+  62C9             ; UP THE POINTER AND DISPLAY THE
0741+  62C9             ; PREVIOUS LOCATION.
0742+  62C9             ;
0743+  62C9 CD 2F 65    SUBS:	CALL	EXPR1	     ;GET STARTING ADDR
0744+  62CC E1          	POP	HL
0745+  62CD 7E          ..S0:	LD	A,(HL)
0746+  62CE CD 7E 65    	CALL	LBYTE	     ;DISPLAY THE BYTE
0747+  62D1 CD E1 65    	CALL	COPCK	     ;MODIFY?
0748+  62D4 D8          	RET	C	     ; NO, ALL DONE
0749+  62D5 28 0F       	JR	Z,..S1	     ;DON'T MODIFY
0750+  62D7 FE 5F       	CP	05FH	     ;BACKUP?
0751+  62D9 28 14       	JR	Z,..S2
0752+  62DB E5          	PUSH	HL	     ;SAVE POINTER
0753+  62DC CD 56 65    	CALL	EXF	     ;GET NEW VALUE
0754+  62DF D1          	POP	DE	     ;VALUE IN EE
0755+  62E0 E1          	POP	HL
0756+  62E1 73          	LD	(HL),E	     ;MODIFY
0757+  62E2 78          	LD	A,B	     ;TEST DELIMITER
0758+  62E3 FE 0D       	CP	CR
0759+  62E5 C8          	RET	Z	     ;DONE
0760+  62E6 23          ..S1:	INC	HL
0761+  62E7 7D          ..S3:	LD	A,L	     ;SEE IF TIME TO CRLF
0762+  62E8 E6 07       	AND	7
0763+  62EA CC 6C 64    	CALL	Z,LFADR	     ;TIME TO CRLF
0764+  62ED 18 DE       	JR	..S0
0765+  62EF 2B          ..S2:	DEC	HL	     ;DECREMENT POINTER
0766+  62F0 18 F5       	JR	..S3	     ;AND PRINT DATA THERE.
0767+  62F2             ;
0768+  62F2             ; THIS ROUTINE TRANSLATES THE DATA IN
0769+  62F2             ; MEMORY TO AN ASCII FORMAT.  ALL NON-
0770+  62F2             ; PRINTING CHARACTERS AREE CONVERTED TO
0771+  62F2             ; PERIODS. [.]
0772+  62F2             ; THERE ARE 64 CHARACTERS PER LINE.
0773+  62F2             ;
0774+  62F2 CD FB 64    TYPE:	CALL	EXLF	     ;DISPLAY RANGE
0775+  62F5 CD 6C 64    ..T0:	CALL	LFADR	     ;DISPLAY ADDRESS
0776+  62F8 06 40       	LD	B,64	     ;CHARACTERS PER LINE
0777+  62FA 7E          ..T1:	LD	A,(HL)
0778+  62FB E6 7F       	AND	7FH	     ;KILL PARITY BIT
0779+  62FD FE 20       	CP	' '	     ;RANGE TEST
0780+  62FF 30 02       	JR	NC,..T3	     ;=>SPACEE
0781+  6301 3E 2E       ..T2:	LD	A,'.'	     ;REPLACE NON-PRINTING
0782+  6303 FE 7C       ..T3:	CP	07CH	     ;ABOVE LOWER CASE z
0783+  6305 30 FA       	JR	NC,..T2
0784+  6307 4F          	LD	C,A	     ;SEND IT
0785+  6308 CD 74 64    	CALL	CO
0786+  630B CD 5D 65    	CALL	HILOX	     ;MORE TO GO?
0787+  630E 10 EA       	DJNZ	..T1	     ;SEE FI TIME TO CRLF
0788+  6310 18 E3       	JR	..T0	     ;YES
0789+  6312             ;
0790+  6312             ; THIS IS A HEXADECIMAL SEARCH ROUTINE. IT
0791+  6312             ; TAKES NO ADDRESS PARAMETERS.  AS MANY
0792+  6312             ; BYTES MAY BE ENTERED, SEPERATED BY A COMMA,
0793+  6312             ; AS DESIRED.  THE MAXIMUM IS 255, BUT 3-4 IS
0794+  6312             ; TYPICAL, AND MORE THAN 12 WOULD BE UNUSUAL.
0795+  6312             ; THE ENTIRE MEMORY IS SEARCHED STARTING
0796+  6312             ; FROM ZERO, AND ALL STARTING ADDRESSES OF EACH
0797+  6312             ; OCCURANCE OF THE SEARCH STRING ARE PRINTED
0798+  6312             ; ON THE CONSOLE DEVICE.
0799+  6312             ;
0800+  6312 16 00       WHERE:	LD	D,0	     ;COUNT SEARCH STRING
0801+  6314 CD 2F 65    ...W0:	CALL	EXPR1	     ;GET ONE BYTE
0802+  6317 E1          	POP	HL	     ;PICK IT UP
0803+  6318 65          	LD	H,L	     ;STICK IN HIGH BYTE
0804+  6319 E5          	PUSH	HL	     ;PUT IT IN STACK
0805+  631A 33          	INC	SP	     ;ADJUST STACK
0806+  631B 14          	INC	D	     ;COUNT UP
0807+  631C 78          	LD	A,B	     ;TEST DELIMITER
0808+  631D D6 0D       	SUB	CR
0809+  631F 20 F3       	JR	NZ,...W0	     ;MORE TO GO
0810+  6321 47          	LD	B,A	     ;CHEAP ZEROS
0811+  6322 4F          	LD	C,A
0812+  6323 67          	LD	H,A
0813+  6324 6A          	LD	L,D	     ;GET BYTE COUNT IN L
0814+  6325 2D          	DEC	L	     ;-1
0815+  6326 39          	ADD	HL,SP	     ;BYTES STORED IN STACKK
0816+  6327 E5          	PUSH	HL
0817+  6328 C5          	PUSH	BC
0818+  6329 C5          FINDC:	PUSH	BC	     ;SAVE THAT POINTER
0819+  632A CD 00 65    	CALL	CRLF
0820+  632D C1          	POP	BC	     ;RESTORE
0821+  632E E1          FIND:	POP	HL	     ;HL=SEARCH ADDR
0822+  632F DD E1       	POP	IX	     ;X=SEARCH BYTE POINTER
0823+  6331 5A          	LD	E,D	     ;RESET COUNTER
0824+  6332 DD 7E 00    	LD	A,(IX)	     ;GET THE FIRST SEARCH BYTE
0825+  6335 ED B1       	CPIR		     ;COMPARE, INCR., & REPEAT
0826+  6337 E2 6E 62    	JP	PO,DONE	     ;ODD PARITY=DONE
0827+  633A DD E5       	PUSH	IX	     ;SAVE POINTERS
0828+  633C E5          	PUSH	HL
0829+  633D 1D          FOUND:	DEC	E
0830+  633E 28 0B       	JR	Z,TELL	     ;FOUND ALL
0831+  6340 DD 7E FF    	LD	A,(IX-1)	     ;LOOK AT NEXT MATCH
0832+  6343 BE          	CP	(HL)	     ;TEST NEXT
0833+  6344 20 E8       	JR	NZ,FIND	     ;NO MATCH
0834+  6346 23          	INC	HL	     ;BUMP POINTER
0835+  6347 DD 2B       	DEC	IX
0836+  6349 18 F2       	JR	FOUND	     ;TEST NEXT MATCH
0837+  634B E1          TELL:	POP	HL
0838+  634C E5          	PUSH	HL
0839+  634D 2B          	DEC	HL
0840+  634E C5          	PUSH	BC	     ;SAVE SEARCH COUNT LIMIT
0841+  634F CD 79 65    	CALL	LADR	     ;TELL CONSOLE
0842+  6352 C1          	POP	BC	     ;RESTORE
0843+  6353 18 D4       	JR	FINDC
0844+  6355 33          DONE2:	INC	SP
0845+  6356 1D          	DEC	E	     ;RESET STACK
0846+  6357 20 FC       	JR	NZ,DONE2
0847+  6359 C9          	RET	
0848+  635A             ;
0849+  635A             ; THIS ROUTINE DUMPS MEMORY IN THE STANDARD
0850+  635A             ; INTEL HEX-FILE FORMAT.  A START & END
0851+  635A             ; PARAMETER IS REQUIRED.  AT THE CONCLUSION
0852+  635A             ; OF THE DUMP, AND "END OF FILE" SHOULD BE
0853+  635A             ; GENERATED WITH THE "E" COMMAND.
0854+  635A             ;
0855+  635A CD FB 64    WRITE:	CALL	EXLF	     ;GET TWO PARAMETERS
0856+  635D CD E8 64    	CALL	WAIT	     ;PAUSE IF TTY CONFIGURATION
0857+  6360 CD A9 64    ..W0:	CALL	PEOL	     ;CRLF TO PUNCH
0858+  6363 01 3A 00    	LD	BC,':'	     ;START OF FILE
0859+  6366 CD B0 64    	CALL	PUO	     ;PUNCH IT
0860+  6369 D5          	PUSH	DE	     ;SAVE
0861+  636A E5          	PUSH	HL	     ;POINTERS
0862+  636B 04          ..W1:	INC	B	     ;CALCULATE FILE LENGTH
0863+  636C CD 63 65    	CALL	HILO
0864+  636F 38 24       	JR	C,..W4	     ;SHORT FILE
0865+  6371 3E 18       	LD	A,24	     ;24 BYTES PER FILE
0866+  6373 90          	SUB	B	     ;ENOUGH YET?
0867+  6374 20 F5       	JR	NZ,..W1	     ; NO.
0868+  6376 E1          	POP	HL	     ;GET START ADDR BACK.
0869+  6377 CD 7D 63    	CALL	..W2	     ;SEND THE BLOCK
0870+  637A D1          	POP	DE	     ;RESTORE END OF FILE POINTER
0871+  637B 18 E3       	JR	..W0	     ;KEEP GOING
0872+  637D 57          ..W2:	LD	D,A	     ;INITIALIZE CHECKSUM
0873+  637E 78          	LD	A,B	     ;FILE LENGTH
0874+  637F CD CA 65    	CALL	PBYTE	     ;PUNCH IT
0875+  6382 CD C5 65    	CALL	PADR	     ;PUNCH ADDRESS
0876+  6385 AF          	XOR	A	     ;FILE TYPE=0
0877+  6386 CD CA 65    	CALL	PBYTE	     ;PUNCH IT
0878+  6389 7E          ..W3:	LD	A,(HL)	     ;GET A DATA BYTE
0879+  638A CD CA 65    	CALL	PBYTE	     ;PUNCH IT
0880+  638D 23          	INC	HL	     ;POINT TO NEXT BYTE
0881+  638E 10 F9       	DJNZ	..W3	     ;DECREMENT FILE COUNT
0882+  6390 AF          	XOR	A
0883+  6391 92          	SUB	D	     ;CALCULATE CHECKSUM
0884+  6392 C3 CA 65    	JP	PBYTE	     ;PUNCH IT, RETURN
0885+  6395 E1          ..W4:	POP	HL	     ;CLEAR STACK
0886+  6396 D1          	POP	DE	     ; OF POINTERS
0887+  6397 AF          	XOR	A	     ;SET UP A
0888+  6398 18 E3       	JR	..W2	     ;FINISH UP & RETURN
0889+  639A             ;
0890+  639A             ;
0891+  639A             ;	THIS ROUTINE ALLOWS DISPLAYING THE
0892+  639A             ; USER'S CPU REGISTERS.  THEY ALSO MAY BE 
0893+  639A             ; USING THE REGISTER NAME AFTER TYPEINT THE "X".
0894+  639A             ; I.E. XA 00-
0895+  639A             ; THE REGISTER MAY BE SKIPPED OVER, OR MODIFIED,
0896+  639A             ; SIMILARLY TO THE "S" COMMAND.
0897+  639A             ;
0898+  639A             ; TO DISPLAY THE "NORMAL" SYSTEM STATUS,
0899+  639A             ; SIMPLY TYPE "X[CR]".  TO DISPLAY THE
0900+  639A             ; ADDISTIONAL Z-80 REGISTERS, FOLLOW
0901+  639A             ; THE "X" WITH AN APOSTROPHE.  I.E. "X'[CR]",
0902+  639A             ; OR TO EXAMINE A SINGLE "PRIME" REGISTER,
0903+  639A             ; TYPE THE REGISTER IDENTIFIER AFTER THE
0904+  639A             ; APOSTROPHE.  I.E.  X'X 0000-
0905+  639A             ;
0906+  639A             ; THESE REGISTER VALUES ARE PLACED INTO THE CPU
0907+  639A             ; UPON EXECUTING ANY "GO" COMMAND. [G]
0908+  639A             ;
0909+  639A CD 0A 67    XAM:	CALL	TI
0910+  639D 21 9F 67    	LD	HL,ACTBL
0911+  63A0 FE 0D       	CP	CR	     ;FULL REG. DISPLAY
0912+  63A2 28 5A       	JR	Z,..X6
0913+  63A4 FE 2C       	CP	2CH	;SEE IF PRIMES WANTED
0914+  63A6 20 0A       	JR	NZ,..X0
0915+  63A8 21 B7 67    	LD	HL,PRMTB
0916+  63AB CD 0A 67    	CALL	TI
0917+  63AE FE 0D       	CP	CR	     ;FULL REG. DISPLAY
0918+  63B0 28 4C       	JR	Z,..X6
0919+  63B2 BE          ..X0:	CP	(HL)	     ;TEST FOR REGISTER NAME
0920+  63B3 28 09       	JR	Z,..X1
0921+  63B5 CB 7E       	BIT	7,(HL)	     ;SEE IF END OF TABLE
0922+  63B7 C2 4E 64    	JP	NZ,ERROR
0923+  63BA 23          	INC	HL
0924+  63BB 23          	INC	HL
0925+  63BC 18 F4       	JR	..X0
0926+  63BE CD 72 64    ..X1:	CALL	BLK
0927+  63C1 23          ..X2:	INC	HL
0928+  63C2 7E          	LD	A,(HL)
0929+  63C3 47          	LD	B,A	     ;SAVE FOR FLAGS
0930+  63C4 E6 3F       	AND	3FH	     ;CLEAR FLAGS FOR BIAS
0931+  63C6 EB          	EX	DE,HL
0932+  63C7 6F          	LD	L,A	     ;DISPLACEMENT FROM STACK
0933+  63C8 26 00       	LD	H,0
0934+  63CA 39          	ADD	HL,SP
0935+  63CB EB          	EX	DE,HL	
0936+  63CC 23          	INC	HL
0937+  63CD 1A          	LD	A,(DE)	     ;PICK UP REG. VALUE
0938+  63CE CD 7E 65    	CALL	LBYTE	     ;PRINT IT
0939+  63D1 CB 78       	BIT	7,B
0940+  63D3 28 05       	JR	Z,..X3
0941+  63D5 1B          	DEC	DE
0942+  63D6 1A          	LD	A,(DE)
0943+  63D7 CD 7E 65    	CALL	LBYTE
0944+  63DA CD E1 65    ..X3:	CALL	COPCK	     ;MODIFY
0945+  63DD D8          	RET	C	     ;CR ENTERED, ALL DONE
0946+  63DE 28 19       	JR	Z,..X5	     ;SKIP TO NEXT REG.
0947+  63E0 E5          	PUSH	HL
0948+  63E1 C5          	PUSH	BC
0949+  63E2 CD 56 65    	CALL	EXF	     ;GET NEW VALUE
0950+  63E5 E1          	POP	HL
0951+  63E6 F1          	POP	AF
0952+  63E7 C5          	PUSH	BC
0953+  63E8 F5          	PUSH	AF
0954+  63E9 7D          	LD	A,L
0955+  63EA 12          	LD	(DE),A
0956+  63EB C1          	POP	BC
0957+  63EC CB 78       	BIT	7,B	     ;SEE IF 8 BIT OR 16 BIT REG.
0958+  63EE 28 03       	JR	Z,..X4	     ;8 BIT
0959+  63F0 13          	INC	DE
0960+  63F1 7C          	LD	A,H	     ;HIGH BYTE OF 16 BIT REG.
0961+  63F2 12          	LD	(DE),A
0962+  63F3 C1          ..X4:	POP	BC
0963+  63F4 E1          	POP	HL
0964+  63F5 78          	LD	A,B	     ;TEST DELIMITER
0965+  63F6 FE 0D       	CP	CR
0966+  63F8 C8          	RET	Z	     ;CR ENTRED, ALL DONE
0967+  63F9 CB 7E       ..X5:	BIT	7,(HL)	     ;SEE IF END OF TABLE
0968+  63FB C0          	RET	NZ	     ;RETURN IF SO
0969+  63FC 18 C3       	JR	..X2
0970+  63FE CD 00 65    ..X6:	CALL	CRLF
0971+  6401 CD 72 64    ..X7:	CALL	BLK
0972+  6404 7E          	LD	A,(HL)
0973+  6405 23          	INC	HL
0974+  6406 B7          	OR	A
0975+  6407 F8          	RET	M
0976+  6408 4F          	LD	C,A
0977+  6409 CD 74 64    	CALL	CO
0978+  640C 0E 3D       	LD	C,'='
0979+  640E CD 74 64    	CALL	CO
0980+  6411 7E          	LD	A,(HL)
0981+  6412 47          	LD	B,A	     ;SAVE FLAGS
0982+  6413 E6 3F       	AND	3FH	     ;CLEAR UP FOR OFFSET
0983+  6415 23          	INC	HL
0984+  6416 EB          	EX	DE,HL
0985+  6417 6F          	LD	L,A
0986+  6418 26 00       	LD	H,0
0987+  641A 39          	ADD	HL,SP
0988+  641B EB          	EX	DE,HL
0989+  641C CB 70       	BIT	6,B	     ;TEST FOR SPECIAL "M"
0990+  641E 20 0F       	JR	NZ,..X9	     ;PRINT OUT ACTUAL "M"
0991+  6420 1A          	LD	A,(DE)
0992+  6421 CD 7E 65    	CALL	LBYTE	     ;PRINT REG. VALUE
0993+  6424 CB 78       	BIT	7,B	     ;SINGLE OR DOUBLE?
0994+  6426 28 D9       	JR	Z,..X7	     ;SINGLE.
0995+  6428 1B          	DEC	DE
0996+  6429 1A          	LD	A,(DE)
0997+  642A CD 7E 65    ..X8:	CALL	LBYTE
0998+  642D 18 D2       	JR	..X7
0999+  642F E5          ..X9:	PUSH	HL	     ;SAVE HL
1000+  6430 1A          	LD	A,(DE)	     ;GET REG. POINTER
1001+  6431 67          	LD	H,A	     ;HIGH BYTE
1002+  6432 1B          	DEC	DE
1003+  6433 1A          	LD	A,(DE)
1004+  6434 6F          	LD	L,A	     ;LOW BYTE
1005+  6435 7E          	LD	A,(HL)	     ;GET VALUE
1006+  6436 E1          	POP	HL	     ;RESTORE HL
1007+  6437 18 F1       	JR	..X8	     ;PRINT VALUE & CONTINUE
1008+  6439             ;
1009+  6439             ; THIS IS A MESSAGE OUTPUT ROUTINE.
1010+  6439             ; IT IS USED BY THE SIGN-ON AND THE CRLF.
1011+  6439             ; POINTER IS IN HL (WHEN ENTERED AT
1012+  6439             ; TOM1) AND LENGTH IN B REG.
1013+  6439             ;
1014+  6439 21 21 60    TOM:	LD	HL,MSG
1015+  643C 4E          TOM1	LD	C,(HL)	     ;GET A CHARACTER
1016+  643D 23          	INC	HL	     ;MOVE POINTER
1017+  643E CD 74 64    	CALL	CO	     ;OUTPUT IT
1018+  6441 10 F9       	DJNZ	TOM1	     ;KEEP GOILG TILL B=0
1019+  6443 CD 08 65    	CALL	CSTS	     ;SEE IF AN ABORT REQUEST
1020+  6446 B7          	OR	A	     ; WAITING
1021+  6447 C8          	RET	Z	     ;NO.
1022+  6448             ;
1023+  6448             ; SEE IF CONTROL-C IS WAITING
1024+  6448             ; ABMRT IF SO.
1025+  6448 CD 04 67    CCHK:	CALL	KI
1026+  644B FE 03       	CP	3	     ;CONTROL-C?
1027+  644D C0          	RET	NZ
1028+  644E             ;
1029+  644E             ; SYSTEM ERROR ROUTINE. THIS
1030+  644E             ; WILL RESTORE THE SYTEM AFTER
1031+  644E             ; A SYSTEM ERROR HAS BEEN TAKEN.
1032+  644E             ; THE I/O CONFIGURATION IS NOT
1033+  644E             ; AFFECTED.
1034+  644E             ;
1035+  644E CD A8 65    ERROR:	CALL	MEMSIZ
1036+  6451 11 EA FF    	LD	DE,-22	     ;STACK POINTER OFFSET
1037+  6454 19          	ADD	HL,DE
1038+  6455 F9          	LD	SP,HL
1039+  6456 0E 2A       	LD	C,'*'	     ;ANNOUNCE ERROR
1040+  6458 CD 74 64    	CALL	CO
1041+  645B C3 5D 60    	JP	START	     ;BACK TO WORK
1042+  645E             ;
1043+  645E             ; THIS GETS A READER CHARACTER,
1044+  645E             ; AND COMPARES IT WITH THE 'D' REG.
1045+  645E             ; IT ABORTS ON AND 'OUT-OF-DATA'
1046+  645E             ; CONDITION.
1047+  645E             ;
1048+  645E CD 15 66    RIFF:	CALL	RI	     ;GET READER CHARACTER
1049+  6461 38 EB       	JR	C,ERROR	     ;ABORT ON CARRY
1050+  6463 BA          	CP	D	     ;TEST D
1051+  6464 C9          	RET	
1052+  6465             ;
1053+  6465             ; THIS ROUTINE WILL RETURN THE
1054+  6465             ; CURRENT VALUE OF THE HIGHEST
1055+  6465             ; READ/WRITE MEMORY LOCATION THAT
1056+  6465             ; IS AVAILABLE ON THE SYSTEM.
1057+  6465             ; IT WILL "SEARCH" FOR MEMORY
1058+  6465             ; STARTING AT THE BOTTOM OF MEMORY
1059+  6465             ; AND GO UPWARDS UNTIL NON-R/W MEMORY
1060+  6465             ; IS FOUND.
1061+  6465             ;
1062+  6465 CD A8 65    SIZE:	CALL	MEMSIZ	     ;GET THE VALUE
1063+  6468 01 23 00    	LD	BC,ENDX-EXIT
1064+  646B 09          	ADD	HL,BC	     ;ADJUST IT
1065+  646C             ;
1066+  646C             ;
1067+  646C             ; CRLF BEFORE HLSP ROUTINE
1068+  646C             ;
1069+  646C CD 00 65    LFADR:	CALL	CRLF
1070+  646F             ;
1071+  646F             ; PRINT THE CURRENT VALUE OF H&L,
1072+  646F             ; AND A SPACE.
1073+  646F             ;
1074+  646F CD 79 65    HLSP:	CALL	LADR
1075+  6472             ;
1076+  6472             ; PRINT A SPACE ON THE CONSOLE
1077+  6472             ;
1078+  6472 0E 20       BLK:	LD	C,' '
1079+  6474             ;
1080+  6474             ; THIS IS THE MAIN CONSOLE
1081+  6474             ; OUTPUT ROUTINE
1082+  6474             ;
1083+  6474 CD 06 61    CO:	CALL	IOCHK
1084+  6477 E6 03       	AND	NOT CMSK
1085+  6479 20 0A       	JR	NZ,CO0
1086+  647B             ;
1087+  647B             ; TELEPRINTER CONFIGURATION
1088+  647B             ; I/O DRIVER.
1089+  647B             ;
1090+  647B DB 95       TTYOUT:	IN	A,TTS
1091+  647D E6 20       	AND	TTYBE
1092+  647F 28 FA       	JR	Z,TTYOUT	; WW: NZ -> Z
1093+  6481 79          	LD	A,C
1094+  6482 D3 90       	OUT	TTO,A
1095+  6484 C9          	RET	
1096+  6485 3D          CO0:	DEC	A	     ;CCRT?
1097+  6486 20 0A       	JR	NZ,CO1	     ; NO.
1098+  6488             ;
1099+  6488             ; C.R.T. CONFIGURATION DRIVER.
1100+  6488             ;
1101+  6488 DB 50       CRTOUT:	IN	A,CRTS
1102+  648A E6 80       	AND	CRTBE
1103+  648C 20 FA       	JR	NZ,CRTOUT
1104+  648E 79          	LD	A,C
1105+  648F D3 51       	OUT	CRTO,A
1106+  6491 C9          	RET	
1107+  6492             ;
1108+  6492 3D          CO1:	DEC	A	     ;BATCH
1109+  6493 C2 00 00    	JP	NZ,COLOC     ; NO, MUST BE USER
1110+  6496             ;
1111+  6496             ; LIST OUTPUT DRIVER ROUTINE
1112+  6496             ; -A USER VECTORED ROUTINE, USED
1113+  6496             ; BYT THE ASSEMBLER, ETC.  ALSO,
1114+  6496             ; WHEN THE ASSIGNED MODE IS "BATCH",
1115+  6496             ; THIS IS THE ROUTINE USED FOR THE
1116+  6496             ; MONITOR OUTPUT THAT WOULD NORMALLY
1117+  6496             ; GO TO THE "CONSOLE".
1118+  6496             ;
1119+  6496 CD 06 61    LO:	CALL	IOCHK
1120+  6499 E6 C0       	AND	NOT LMSK
1121+  649B 28 DE       	JR	Z,TTYOUT
1122+  649D FE 40       	CP	LCRT
1123+  649F 28 E7       	JR	Z,CRTOUT
1124+  64A1 FE 80       	CP	LINE
1125+  64A3 CA 00 00    	JP	Z,LNLOC	     ;EXTERNAL VECTOR
1126+  64A6 C3 00 00    	JP	LULOC	     ;USER DEFINED VECTOR
1127+  64A9             ;
1128+  64A9             ; SEND CRLF TO PUNCH DEVICE
1129+  64A9             ;
1130+  64A9 0E 0D       PEOL:	LD	C,CR
1131+  64AB CD B0 64    	CALL	PUO
1132+  64AE 0E 0A       	LD	C,LF
1133+  64B0             ;
1134+  64B0             ; PUNCH OUTPUT DRIVER ROUTINE
1135+  64B0             ;
1136+  64B0 CD 06 61    PUO:	CALL	IOCHK
1137+  64B3 E6 30       	AND	NOT PMSK
1138+  64B5 28 C4       	JR	Z,TTYOUT	     ;PUNCH=TELEPRINTER
1139+  64B7 FE 20       	CP	PCAS	     ;CASSETTE?
1140+  64B9 20 0A       	JR	NZ,PO1	     ; NO.
1141+  64BB             ;
1142+  64BB DB 60       PO0:	IN	A,PCASS
1143+  64BD E6 80       	AND	PCSBE
1144+  64BF 20 FA       	JR	NZ,PO0
1145+  64C1 79          	LD	A,C
1146+  64C2 D3 61       	OUT	PCASO,A
1147+  64C4 C9          	RET	
1148+  64C5             ;
1149+  64C5 FE 10       PO1:	CP	PPTP
1150+  64C7 CA 00 00    	JP	Z,PTPL	     ;EXTERNAL VECTOR
1151+  64CA C3 00 00    	JP	PULOC	     ;USER VECTOR
1152+  64CD             ;
1153+  64CD             ;
1154+  64CD             ; THIS IS A BINARY DUMP ROUTINE THAT MAY BE
1155+  64CD             ; USED WITH BOTH PAPER-TAPE AND/OR CASSETTE
1156+  64CD             ; SYSTEMS.  IT PUNCHES A START-OF-FILE MARK
1157+  64CD             ; AND THEN PUNCHES IN FULL 8-BITS DIRECTLY
1158+  64CD             ; FROM MEMORY.  IT IS FOLLOWED BY AN END-OF-
1159+  64CD             ; FILE MARKER.  THESE DUMPS MAY BE LOADED
1160+  64CD             ; USING THE "L" COMMAND.  THEY ARE USEFUL
1161+  64CD             ; FOR FAST LOADING, AND MAY BE VERIFIED
1162+  64CD             ; USING THE "C" (COMPARE) COMMAND.
1163+  64CD             ;
1164+  64CD             ; U<A1>,<A2>[CR]
1165+  64CD             ; PUNCHES FROM <A1> THRU <A2>
1166+  64CD             ;
1167+  64CD CD FB 64    UNLD:	CALL	EXLF	     ;GET TWO PARAMETERS
1168+  64D0 CD E8 64    	CALL	WAIT	     ;PAUSE FOR PUNCH-ON (TTY)
1169+  64D3 CD 92 65    	CALL	LEAD	     ;PUNCH LEADER
1170+  64D6 CD 8D 65    	CALL	MARK	     ;PUNCH FILE MARKER
1171+  64D9 4E          ..U:	LD	C,(HL)	     ;GET MEMORY BYTE
1172+  64DA CD B0 64    	CALL	PUO	     ;PUNCH IT
1173+  64DD CD 63 65    	CALL	HILO	     ;SEE IF DONE
1174+  64E0 30 F7       	JR	NC,..U
1175+  64E2 CD 8D 65    	CALL	MARK	     ;PUNCH END OF FILE MARKER
1176+  64E5             ;
1177+  64E5             ; THIS PUNCHES NULLS (LEADER/TRAILER).
1178+  64E5             ; IT RETURNS "QUIET" IN CASE THE PUNCH
1179+  64E5             ; AND CONSOLE ARE THE SAME.
1180+  64E5             ;
1181+  64E5 CD 92 65    NULL:	CALL	LEAD	     ;PUNCH NULLS
1182+  64E8             ;
1183+  64E8             ; THIS ROUTINE WILL PAUSE FOR
1184+  64E8             ; A KEYBOARD CHARACTER.  IT IS
1185+  64E8             ; USED AS A DELAY TO GIVE THE
1186+  64E8             ; OPERATOR TIME TO TURN ON THE
1187+  64E8             ; TELEPRINTER PUNCH BEFORE SENDING
1188+  64E8             ; A HEX FILE OR BINARY FILE TO
1189+  64E8             ; THE PUNCH.  IT WIL SIMPLY
1190+  64E8             ; RETURN IF THE PUNCH & CONSOLE
1191+  64E8             ; ARE NO BOTH ASSIGNED TO THE
1192+  64E8             ; DEFAULT.  (TELEPRINTER)
1193+  64E8             ;
1194+  64E8 CD 06 61    WAIT:	CALL	IOCHK
1195+  64EB E6 33       	AND	~CMSK | ~PMSK	; WW: WAS "AND	NOT CMSK OR NOT PMSK"
1196+  64ED C0          	RET	NZ
1197+  64EE C3 69 60    	JP	STARO	     ;RETURN "QUIET"
1198+  64F1             ;
1199+  64F1             ; CONVERT HEX TO ASCII
1200+  64F1             ;
1201+  64F1 E6 0F       CONV:	AND	0FH	     ;LOW NIBBLE ONLY
1202+  64F3 C6 90       	ADD	90H
1203+  64F5 27          	DAA	
1204+  64F6 CE 40       	ADC	40H
1205+  64F8 27          	DAA	
1206+  64F9 4F          	LD	C,A
1207+  64FA C9          	RET	
1208+  64FB             ;
1209+  64FB             ; GET TWO PARAMETERS, PLACE
1210+  64FB             ; THEM IN DE & HL, AND THEN
1211+  64FB             ; CRLF.
1212+  64FB             ;
1213+  64FB CD 31 65    EXLF:	CALL	EXPR
1214+  64FE D1          	POP	DE
1215+  64FF E1          	POP	HL
1216+  6500             ;
1217+  6500             ; CONSOLE CARRIAGE RETURN &
1218+  6500             ; LINE FEED ROUTINE.
1219+  6500             ;
1220+  6500             ; THE NUMBER OF FILL CHARACTERS
1221+  6500             ; MAY BE ADJUSTED TO 0-3 BY THE 
1222+  6500             ; VALUE PLACED IN THE B REG. MINIMUM
1223+  6500             ; VALUE FOR "B" IS TWO (2). MAXIMUM
1224+  6500             ; IS FIVE (5).
1225+  6500             ;
1226+  6500 E5          CRLF:	PUSH	HL	     ;SAVE HL
1227+  6501             	;WW	LD	B,4	     ;CRLF LENGTH (SET FOR 2 FILLS)
1228+  6501 06 02       	LD	B,2	     ; WW - CHANGE TO ZERO FILLS
1229+  6503 CD 39 64    	CALL	TOM	     ;SEND CRLF
1230+  6506 E1          	POP	HL
1231+  6507 C9          	RET	
1232+  6508             ;
1233+  6508             ;	I
1234+  6508             ; TEST THE CURRENT CONSOLES
1235+  6508             ; KEYBOARD FOR A KEY-PRESS
1236+  6508             ; RETURN TRUE (0FFH IN A REG)
1237+  6508             ; IF THERE IS A CHARACTER
1238+  6508             ; WAITING IN THE UART.
1239+  6508             ;
1240+  6508 CD 06 61    CSTS:	CALL	IOCHK
1241+  650B E6 03       	AND	NOT CMSK
1242+  650D 20 04       	JR	NZ,CS0
1243+  650F DB 95       	IN	A,TTS
1244+  6511 18 05       	JR	CS1
1245+  6513 3D          CS0:	DEC	A	     ;CCRT
1246+  6514 20 09       	JR	NZ,CS3
1247+  6516 DB 50       	IN	A,CRTS
1248+  6518 E6 01       CS1:	AND	TTYDA
1249+  651A 3E 00       	LD	A,FALSE
1250+  651C C8          CS2:	RET	Z		; WW: NZ -> Z
1251+  651D 2F          	CPL	
1252+  651E C9          	RET	
1253+  651F 3D          CS3:	DEC	A	     ;BATCH
1254+  6520 C8          	RET	Z
1255+  6521 C3 00 00    	JP	CSLOC	     ;USED DEFINED FUNCTION
1256+  6524             ;
1257+  6524             ; GET THREE PARAMETERS AND
1258+  6524             ; CRLF.
1259+  6524             ;
1260+  6524 0C          EXPR3:	INC	C
1261+  6525 CD 31 65    	CALL	EXPR
1262+  6528 CD 00 65    	CALL	CRLF
1263+  652B C1          	POP	BC
1264+  652C D1          	POP	DE
1265+  652D E1          	POP	HL
1266+  652E C9          	RET	
1267+  652F             ;
1268+  652F             ; GET ONE PARAMETER.
1269+  652F             ; NO CRLF.
1270+  652F             ;
1271+  652F 0E 01       EXPR1:	LD	C,1
1272+  6531             ;
1273+  6531             ; THIS IS THE MAIN "PARAMETER-GETTING" ROUTINE.
1274+  6531             ; THIS ROUTINE WILL ABORT ON A NON-HEX CHARACTER.
1275+  6531             ; IT TAKES THE MOST RECENTELY TYPED FOUR VALID
1276+  6531             ; HEX CHARACTERS, AND PLACES THEM UP ON THE STACK.
1277+  6531             ; (AS ONE 16 BIT VALUE, CONTAINED IN TWO
1278+  6531             ; 8-BIT BYTES.)  IF A CARRIAGE RETURN IS ENTERED,
1279+  6531             ; IT WILL PLACE THE VALUE OF "0000" IN THE STACK.
1280+  6531             ;
1281+  6531 21 00 00    EXPR:	LD	HL,0	     ;INITIALIZE HL TO ZERO
1282+  6534 CD 0A 67    EX0:	CALL	TI	     ;GET SOMETHING FROM CONSOLE
1283+  6537 47          EX1:	LD	B,A	     ;SAVE IT
1284+  6538 CD B5 65    	CALL	NIBBLE	     ;CONVERT ASCII TO HEX
1285+  653B 38 08       	JR	C,..EX2	     ;ILLEGAL CHARACTER DECTECTED
1286+  653D 29          	ADD	HL,HL	     ;MULTIPLY BY 16
1287+  653E 29          	ADD	HL,HL
1288+  653F 29          	ADD	HL,HL
1289+  6540 29          	ADD	HL,HL
1290+  6541 B5          	OR	L	     ;OR IN THE SINGLE NIBBLE
1291+  6542 6F          	LD	L,A
1292+  6543 18 EF       	JR	EX0	     ;GET SOME MORE
1293+  6545 E3          ..EX2:	EX	(SP),HL	     ;SAVE UP IN STACK
1294+  6546 E5          	PUSH	HL	     ;REPLACE THE RETURN
1295+  6547 78          	LD	A,B	     ;TEST THE DELIMITER
1296+  6548 CD E9 65    	CALL	QCHK
1297+  654B 30 02       	JR	NC,..EX3	     ;CR ENTERED
1298+  654D 0D          	DEC	C	     ;SHOULD GO TO ZERO
1299+  654E C8          	RET	Z	     ; RETURN IF IT DOES
1300+  654F C2 4E 64    ..EX3:	JP	NZ,ERROR     ;SOMETHING WRONG
1301+  6552 0D          	DEC	C	     ;DO THIS AGAIN?
1302+  6553 20 DC       	JR	NZ,EXPR	     ; YES.
1303+  6555 C9          	RET		     ;ELSE RETURN
1304+  6556 0E 01       EXF:	LD	C,1
1305+  6558 21 00 00    	LD	HL,0
1306+  655B 18 DA       	JR	EX1
1307+  655D             ;
1308+  655D             ; RANGE TESTING ROUTINES.
1309+  655D             ; CARRY SET INDICATES RANGE EXCEEDED.
1310+  655D             ;
1311+  655D CD 63 65    HILOX:	CALL	HILO
1312+  6560 D0          	RET	NC	     ;OK
1313+  6561 D1          	POP	DE	     ;RETURN ONE LEVEL BACKK
1314+  6562 C9          	RET	
1315+  6563             ;
1316+  6563 23          HILO:	INC	HL	     ;INCREMENT HL
1317+  6564 7C          	LD	A,H	     ;TEST FOR CROSSING 64K BORDER
1318+  6565 B5          	OR	L
1319+  6566 37          	SCF		     ;CARRY SET=STOP
1320+  6567 C8          	RET	Z	     ;YES, BORDER CROSSED
1321+  6568 7B          	LD	A,E	     ;NOW, TEST HL VS. DE
1322+  6569 95          	SUB	L
1323+  656A 7A          	LD	A,D
1324+  656B 9C          	SBC	H
1325+  656C C9          	RET		     ;IF CARRY WAS SET, THEN STOP
1326+  656D             ;
1327+  656D             ;	HEXADECIMAL MATH ROUTINE
1328+  656D             ;
1329+  656D             ; THIS ROUTINE IS USEFUL FOR
1330+  656D             ; DETERMINING RELATIVE JUMP
1331+  656D             ; OFFSETS.  IT RETURNS THE SUM
1332+  656D             ; & DIFFERENCE OF TWO PARAMETERS.
1333+  656D             ;
1334+  656D             ;  H<X>,<Y>
1335+  656D             ;
1336+  656D             ; X+Y   X-Y
1337+  656D             ;
1338+  656D CD FB 64    HEXN:	CALL	EXLF
1339+  6570 E5          	PUSH	HL	     ;SAVE HL FOR LATER
1340+  6571 19          	ADD	HL,DE	     ;GET SUM
1341+  6572 CD 6F 64    	CALL	HLSP	     ;PRINT IT
1342+  6575 E1          	POP	HL	     ;THIS IS LATER
1343+  6576 B7          	OR	A	     ;CLEAR CARRY
1344+  6577 ED 52       	SBC	HL,DE		;GET DIFFERENCE & PRINT IT
1345+  6579             ;
1346+  6579             ; PRINT H&L ON CONSOLE
1347+  6579             ;
1348+  6579 7C          LADR:	LD	A,H
1349+  657A CD 7E 65    	CALL	LBYTE
1350+  657D 7D          	LD	A,L
1351+  657E F5          LBYTE:	PUSH	AF
1352+  657F 0F          	RRCA	
1353+  6580 0F          	RRCA	
1354+  6581 0F          	RRCA	
1355+  6582 0F          	RRCA	
1356+  6583 CD 87 65    	CALL	..2
1357+  6586 F1          	POP	AF
1358+  6587 CD F1 64    ..2:	CALL	CONV
1359+  658A C3 74 64    	JP	CO
1360+  658D             ; THIS ROUTINE SENDS EIGHT RUBOUTS
1361+  658D             ; TO THE PUNCH DEVICE.
1362+  658D             ;
1363+  658D 01 FF 08    MARK:	LD	BC,08FFH     ;SET-UP B&C
1364+  6590 18 03       	JR	LE0
1365+  6592             ;
1366+  6592             ; THIS ROUTINE SENDS BLANKDS TO THE
1367+  6592             ; PUNCH DEVICE.
1368+  6592             ;
1369+  6592 01 00 48    LEAD:	LD	BC,4800H     ;PRESET SOME NULLS
1370+  6595 CD B0 64    LE0:	CALL	PUO
1371+  6598 10 FB       	DJNZ	LE0
1372+  659A C9          	RET	
1373+  659B             ;
1374+  659B             ; THIS ROUTINE RETURNS TO A USER
1375+  659B             ; PROGRAM THE CURRENT TOP OF
1376+  659B             ; MEMORY VALUE MINUS WORKSPACE
1377+  659B             ; AREA USED BY THE MONITOR.
1378+  659B             ;
1379+  659B E5          MEMCK:	PUSH	HL
1380+  659C CD A8 65    	CALL	MEMSIZ
1381+  659F 7D          	LD	A,L
1382+  65A0 D6 2C       	SUB	2CH
1383+  65A2 30 01       	JR	NC,...B
1384+  65A4 25          	DEC	H
1385+  65A5 44          ...B:	LD	B,H
1386+  65A6 E1          	POP	HL
1387+  65A7 C9          	RET	
1388+  65A8             ;
1389+  65A8             ; THIS IS A CALLED ROUTINE USED
1390+  65A8             ; TO CALCULATE THE TOP OF MEMORY
1391+  65A8             ; STARTING FROM THE BOTTOM OF
1392+  65A8             ; MEMORY, AND SEARCHING UPWARD UNTIL
1393+  65A8             ; FIRST R/W MEMORY IS FOUND, AND THEN
1394+  65A8             ; CONTINUING UNTIL THE END OF THE R/W
1395+  65A8             ; MEMORY.  THIS ALLOWS R.O.M. AT ZERO,
1396+  65A8             ; AND INSURES A CONTINUOUS MEMORY BLOCK
1397+  65A8             ; HAS BEEN FOUND.
1398+  65A8             ; IT IS USED BY THE ERROR ROUTINE TO
1399+  65A8             ; RESET THE STACK POINTER AS WELL.
1400+  65A8             ;
1401+  65A8 C5          MEMSIZ:	PUSH	BC
1402+  65A9             ;WW	LD	BC,BASE	     ;POINT TO START OF MONITOR
1403+  65A9             ;WW	LD	HL,-1	     ;RAM SEARCH STARTINT PT.
1404+  65A9             ;WW..M0:	INC	H	     ;FIRST FIND R/W MEMORY
1405+  65A9             ;WW	LD	A,(HL)
1406+  65A9             ;WW	CPL	
1407+  65A9             ;WW	LD	(HL),A
1408+  65A9             ;WW	CP	(HL)
1409+  65A9             ;WW	CPL	
1410+  65A9             ;WW	LD	(HL),A
1411+  65A9             ;WW	JR	NZ,..M0
1412+  65A9             ;WW..M1:	INC	H	     ;R/W FOUND, NOW FIND END
1413+  65A9             ;WW	LD	A,(HL)
1414+  65A9             ;WW	CPL	
1415+  65A9             ;WW	LD	(HL),A
1416+  65A9             ;WW	CP	(HL)
1417+  65A9             ;WW	CPL	
1418+  65A9             ;WW	LD	(HL),A
1419+  65A9             ;WW	JR	NZ,..M2
1420+  65A9             ;WW	LD	A,H	     ;TEST FOR MONITOR BORDER
1421+  65A9             ;WW	CP	B
1422+  65A9             ;WW	JR	NZ,..M1	     ;NOT THERE YET
1423+  65A9             ;WW..M2:	DEC	H	     ;BACK UP, SUBTRACT WORKSPACE
1424+  65A9 21 FF EF    	LD	HL,$EFFF	; WW - FIXED TOP OF MEMORY AT $F000
1425+  65AC 01 DD FF    	LD	BC,EXIT-ENDX
1426+  65AF 09          	ADD	HL,BC
1427+  65B0 C1          	POP	BC	     ;RESTORE BC
1428+  65B1 C9          	RET		     ;VALUE IN HL
1429+  65B2             ;
1430+  65B2             ;
1431+  65B2 CD 4F 66    RIBBLE:	CALL	RIX
1432+  65B5 D6 30       NIBBLE:	SUB	'0'	     ;QUALIFY & CONVERT
1433+  65B7 D8          	RET	C	     ;<0
1434+  65B8 FE 17       	CP	'G'-'0'	     ;>F?
1435+  65BA 3F          	CCF		     ;PERVERT CARRY
1436+  65BB D8          	RET	C
1437+  65BC FE 0A       	CP	10	     ;NMBR?
1438+  65BE 3F          	CCF		     ;PERVERT AGAIN
1439+  65BF D0          	RET	NC	     ;RETURN CLEAN
1440+  65C0 D6 07       	SUB	'A'-'9'-1    ;ADJUST
1441+  65C2 FE 0A       	CP	0AH	     ;FILTER ":" THRU "@"
1442+  65C4 C9          	RET	
1443+  65C5             ;
1444+  65C5             ; SEND H&L VALUE TO PUNCH DEVICE
1445+  65C5             ;
1446+  65C5 7C          PADR:	LD	A,H
1447+  65C6 CD CA 65    	CALL	PBYTE
1448+  65C9 7D          	LD	A,L
1449+  65CA             ;
1450+  65CA             ; PUNCH A SINGLE BYTE
1451+  65CA             ;
1452+  65CA F5          PBYTE:	PUSH	AF	     ;NIBBLE AT A TIME
1453+  65CB 0F          	RRCA	
1454+  65CC 0F          	RRCA	
1455+  65CD 0F          	RRCA	
1456+  65CE 0F          	RRCA	
1457+  65CF CD F1 64    	CALL	CONV
1458+  65D2 CD B0 64    	CALL	PUO
1459+  65D5 F1          	POP	AF	     ;NEXT NIBBLE
1460+  65D6 F5          	PUSH	AF	     ;SAVE FOR CHECKSUM
1461+  65D7 CD F1 64    	CALL	CONV
1462+  65DA CD B0 64    	CALL	PUO
1463+  65DD F1          	POP	AF	     ;ORIGINAL BYTE HERE
1464+  65DE 82          	ADD	D	     ;ADDED TO CHECKQUM
1465+  65DF 57          	LD	D,A	     ;UPDATE CHECKSUM
1466+  65E0 C9          	RET	
1467+  65E1             ;
1468+  65E1             ;
1469+  65E1 0E 2D       COPCK:	LD	C,'-'
1470+  65E3 CD 74 64    	CALL	CO
1471+  65E6             ;
1472+  65E6 CD 0A 67    PCHK:	CALL	TI
1473+  65E9             ;
1474+  65E9             ; TEST FOR DELIMITERS
1475+  65E9             ;
1476+  65E9 FE 20       QCHK:	CP	' '	     ;RETURN ZERO IF DELIMITER
1477+  65EB C8          	RET	Z
1478+  65EC FE 2C       	CP	','
1479+  65EE C8          	RET	Z
1480+  65EF FE 0D       	CP	CR	     ;RETURN W/CARRY SET IF CR
1481+  65F1 37          	SCF	
1482+  65F2 C8          	RET	Z
1483+  65F3 3F          	CCF		     ;ELSE NON-ZERO, NO CARRY
1484+  65F4 C9          	RET	
1485+  65F5             ;
1486+  65F5             ; MAIN CONSOLE INPUT ROUTINE
1487+  65F5             ;
1488+  65F5 CD 06 61    CI:	CALL	IOCHK
1489+  65F8 E6 03       	AND	~CMSK		; WW: WAS "NOT CMSK"
1490+  65FA 20 09       	JR	NZ,CI1
1491+  65FC             ;
1492+  65FC             ; TELEPRINTER ROUTINE
1493+  65FC             ;
1494+  65FC DB 95       TTYIN:	IN	A,TTS
1495+  65FE E6 01       	AND	TTYDA
1496+  6600 28 FA       	JR	Z,TTYIN
1497+  6602 DB 90       	IN	A,TTI
1498+  6604 C9          	RET	
1499+  6605             ;
1500+  6605 3D          CI1:	DEC	A	     ;CONSOLE=CRT?
1501+  6606 20 09       	JR	NZ,CI2
1502+  6608             ;
1503+  6608             ; C.R.T. INPUT ROUTINE
1504+  6608             ;
1505+  6608 DB 50       CRTIN:	IN	A,CRTS
1506+  660A E6 40       	AND	CRTDA
1507+  660C 28 FA       	JR	Z,CRTIN
1508+  660E DB 51       	IN	A,CRTI
1509+  6610 C9          	RET	
1510+  6611             ;
1511+  6611 3D          CI2:	DEC	A	     ;BATCH?
1512+  6612 C2 00 00    	JP	NZ,CILOC     ;NO, MUST BE USER DEFINED
1513+  6615             ;
1514+  6615             ;
1515+  6615             ; READER INPUT ROUTINE, WITH
1516+  6615             ; TIME-OUT DELAY. INCLUDES
1517+  6615             ; PULSING OF HARDWARE PORT
1518+  6615             ; TO INDICATE REQUEST FOR
1519+  6615             ; READER DATA.
1520+  6615             ;
1521+  6615 E5          RI:	PUSH	HL
1522+  6616 CD 06 61    	CALL	IOCHK
1523+  6619 E6 0C       	AND	NOT RMSK
1524+  661B             	;WW	CPL	
1525+  661B             	;WW	OUT	RCP,A	     ;PULSE READER CONTROL PORT
1526+  661B             	;WW	CPL		     ;CLEEAR IT
1527+  661B             	;WW	OUT	RCP,A
1528+  661B 20 1B       	JR	NZ,RI3	     ;NOT TTY
1529+  661D 67          	LD	H,A	     ;CLEAR FOR-TIME OUT TEST
1530+  661E DB 95       RI0:	IN	A,TTS
1531+  6620 E6 01       	AND	TTYDA
1532+  6622 20 0F       	JR	NZ,RI2		; WW: Z -> NZ
1533+  6624 C5          	PUSH	BC
1534+  6625 06 00       	LD	B,0
1535+  6627 E3          DL0:	EX	(SP),HL	     ;WASTE TIME
1536+  6628 E3          	EX	(SP),HL	     ;FOR DELAY
1537+  6629 10 FC       	DJNZ	DL0
1538+  662B C1          	POP	BC
1539+  662C 25          	DEC	H
1540+  662D             ;	JR	NZ,RI0		; WW 
1541+  662D 18 EF       	JR	RI0		; WW - ELIMINATE TIMEOUT
1542+  662F AF          RI1:	XOR	A
1543+  6630 37          	SCF	
1544+  6631 E1          	POP	HL
1545+  6632 C9          	RET	
1546+  6633 DB 90       RI2:	IN	A,TTI
1547+  6635 B7          RID:	OR	A
1548+  6636 E1          	POP	HL
1549+  6637 C9          	RET	
1550+  6638 FE 08       RI3:	CP	RCAS
1551+  663A 20 0A       	JR	NZ,RI6
1552+  663C             	;WW	IN	A,SWITCH     ;READ INITIAL SENSE CONDX.
1553+  663C             	;WW	LD	L,A
1554+  663C             RI4:	;WW	IN	A,SWITCH     ;SEE IF SW. ALTERED
1555+  663C             	;WW	CP	L
1556+  663C             	;WW	JR	NZ,RI1	     ;ABORT IF SO
1557+  663C DB 60       	IN	A,RCSS
1558+  663E E6 40       	AND	RCSDA	     ;DATA YET?
1559+  6640 20 FA       	JR	NZ,RI4	     ;KEEP LOOKING
1560+  6642 DB 61       RI5:	IN	A,RCSD
1561+  6644 18 EF       	JR	RID
1562+  6646 E1          RI6:	POP	HL
1563+  6647 FE 04       	CP	RPTR
1564+  6649 CA 00 00    	JP	Z,RPTPL	     ;EXTERNAL ROUTINE
1565+  664C C3 00 00    	JP	RULOC	     ;USER VECTOR
1566+  664F             ;
1567+  664F             ; THIS ROUTINE GETS READER INPUT
1568+  664F             ; AND KILLS THE PARITY BIT.
1569+  664F             ;
1570+  664F CD 5E 64    RIX:	CALL	RIFF
1571+  6652 E6 7F       	AND	7FH
1572+  6654 C9          	RET	
1573+  6655             ;
1574+  6655             ; THIS ROUTINE READS A BINARY FILE
1575+  6655             ; IMAGE, IN THE FORM AS PUNCHED IN
1576+  6655             ; THE "U" (UNLOAD) COMMAND.  IT TAKES
1577+  6655             ; ONE PARAMETER, WHICH IS THE STARTING
1578+  6655             ; ADDRESS OF THE LOAD, AND WILL PRINT
1579+  6655             ; THE LAST ADDRESS (+1) LOADED ON THE
1580+  6655             ; CONSOLE DEVICE.
1581+  6655             ;
1582+  6655 CD 2F 65    LOAD:	CALL	EXPR1	     ;INITIAL LOAD ADDRESS
1583+  6658 E1          	POP	HL
1584+  6659 CD 00 65    	CALL	CRLF
1585+  665C 16 FF       	LD	D,0FFH	     ;START-OF-FILE TAB
1586+  665E 06 04       ...L0:	LD	B,4	     ;FIND AT LEAST FOUR 0FFH'S
1587+  6660 CD 5E 64    ...L1:	CALL	RIFF
1588+  6663 20 F9       	JR	NZ,...L0
1589+  6665 10 F9       	DJNZ	...L1
1590+  6667 CD 5E 64    ...L2:	CALL	RIFF	;4 FOUND, NOW WAIT FOR NON-0FFH
1591+  666A 28 FB       	JR	Z,...L2
1592+  666C 77          	LD	(HL),A	     ;FIRST REAL DATA BYTE
1593+  666D 3E 07       	LD	A,BELL	     ;TELL TTY
1594+  666F D3 90       	OUT	TTO,A
1595+  6671 23          ...L3:	INC	HL
1596+  6672 CD 5E 64    	CALL	RIFF
1597+  6675 28 03       	JR	Z,..EL	     ;POSSIBLE END OF FILE
1598+  6677 77          	LD	(HL),A
1599+  6678 18 F7       	JR	...L3
1600+  667A 1E 01       ..EL:	LD	E,1	     ;INITIALIZE
1601+  667C CD 5E 64    ..EL0:	CALL	RIFF
1602+  667F 20 09       	JR	NZ,..EL1
1603+  6681 1C          	INC	E	     ;COUNT QUES
1604+  6682 3E 07       	LD	A,MAX	     ;LOOK FOR EOF
1605+  6684 BB          	CP	E	     ;FOUND MAX?
1606+  6685 20 F5       	JR	NZ,..EL0	     ;NOPE
1607+  6687 C3 79 65    	JP	LADR	     ;YEP, PRINT END ADDR
1608+  668A 72          ..EL1:	LD	(HL),D
1609+  668B 23          	INC	HL
1610+  668C 1D          	DEC	E	     ;RESTORE
1611+  668D 20 FB       	JR	NZ,..EL1
1612+  668F 77          	LD	(HL),A	     ;REAL BYTE
1613+  6690 18 DF       	JR	...L3
1614+  6692             ;
1615+  6692             ; THIS IS THE BREAKPOINT "TRAP" HANDLING
1616+  6692             ; ROUTINE.  ALL USER REGISTERS ARE SAVED
1617+  6692             ; FOR DISPLAY PURPOSES, AND THE CONTENTS
1618+  6692             ; ARE RESTORED WHEN EXECUTING A "GO" (G)
1619+  6692             ; COMMAND.
1620+  6692             ;
1621+  6692             RESTART:
1622+  6692 E5          	PUSH	HL	     ;PUSH ALL REGISTERS
1623+  6693 D5          	PUSH	DE
1624+  6694 C5          	PUSH	BC
1625+  6695 F5          	PUSH	AF
1626+  6696 CD A8 65    	CALL	MEMSIZ	     ;GET MONITOR'S STACK VALUE
1627+  6699 EB          	EX	DE,HL
1628+  669A 21 0A 00    	LD	HL,10	     ;GO UP 10 BYTES IN STACK
1629+  669D 39          	ADD	HL,SP
1630+  669E 06 04       	LD	B,4	     ;PICK OFF REG.
1631+  66A0 EB          	EX	DE,HL
1632+  66A1 2B          ...R0:	DEC	HL
1633+  66A2 72          	LD	(HL),D	     ;SAVE IN WORKAREA
1634+  66A3 2B          	DEC	HL
1635+  66A4 73          	LD	(HL),E
1636+  66A5 D1          	POP	DE
1637+  66A6 10 F9       	DJNZ	...R0
1638+  66A8 C1          	POP	BC
1639+  66A9 0B          	DEC	BC	     ;ADJUST P.C. VALUE
1640+  66AA F9          	LD	SP,HL	     ;SET MONITOR STACK
1641+  66AB 21 25 00    	LD	HL,TLOCX
1642+  66AE 39          	ADD	HL,SP
1643+  66AF 7E          	LD	A,(HL)
1644+  66B0 91          	SUB	C	     ;LOOK FOR A TRAP/MATCH
1645+  66B1 23          	INC	HL
1646+  66B2 20 04       	JR	NZ,..R1
1647+  66B4 7E          	LD	A,(HL)
1648+  66B5 90          	SUB	B
1649+  66B6 28 0C       	JR	Z,..R3	     ;NO TRAP HERE
1650+  66B8 23          ..R1:	INC	HL
1651+  66B9 23          	INC	HL
1652+  66BA 7E          	LD	A,(HL)
1653+  66BB 91          	SUB	C	     ;TEST FOR SECOND TRAP
1654+  66BC 20 05       	JR	NZ,..R2
1655+  66BE 23          	INC	HL
1656+  66BF 7E          	LD	A,(HL)
1657+  66C0 90          	SUB	B
1658+  66C1 28 01       	JR	Z,..R3
1659+  66C3 03          ..R2:	INC	BC	     ;NO TRAPS SET, RE-ADJUST P.C.
1660+  66C4 21 20 00    ..R3:	LD	HL,LLOCX
1661+  66C7 39          	ADD	HL,SP
1662+  66C8 73          	LD	(HL),E	     ;STORE USER H&L
1663+  66C9 23          	INC	HL
1664+  66CA 72          	LD	(HL),D
1665+  66CB 23          	INC	HL
1666+  66CC 23          	INC	HL
1667+  66CD 71          	LD	(HL),C	     ;AND USER P.C.
1668+  66CE 23          	INC	HL
1669+  66CF 70          	LD	(HL),B
1670+  66D0 C5          	PUSH	BC
1671+  66D1 0E 40       	LD	C,'@'	     ;DISPLAY BREAK ADDRESS.
1672+  66D3 CD 74 64    	CALL	CO
1673+  66D6 E1          	POP	HL
1674+  66D7 CD 79 65    	CALL	LADR
1675+  66DA 21 25 00    	LD	HL,TLOCX
1676+  66DD 39          	ADD	HL,SP
1677+  66DE 01 00 02    	LD	BC,200H
1678+  66E1 5E          ..R4:	LD	E,(HL)	     ;REPLACE BYTES TAKEN FOR TRAP
1679+  66E2 71          	LD	(HL),C	     ;ZERO OUT STORAGE AREA
1680+  66E3 23          	INC	HL
1681+  66E4 56          	LD	D,(HL)
1682+  66E5 71          	LD	(HL),C
1683+  66E6 23          	INC	HL
1684+  66E7 7B          	LD	A,E
1685+  66E8 B2          	OR	D	     ;DO NOTHING IF ZERO
1686+  66E9 28 02       	JR	Z,..R5
1687+  66EB 7E          	LD	A,(HL)
1688+  66EC 12          	LD	(DE),A	     ;STORE BYTE
1689+  66ED 23          ..R5:	INC	HL	     ;SAME THING
1690+  66EE 10 F1       	DJNZ	..R4	     ;FOR OTHER BREAKPOINT
1691+  66F0 08          	EX	AF,AF'	     ;GET ALTERNATE SET OF REG.'S
1692+  66F1 D9          	EXX	
1693+  66F2 E5          	PUSH	HL	     ;AND STORE IN WORKSPACE
1694+  66F3 D5          	PUSH	DE
1695+  66F4 C5          	PUSH	BC
1696+  66F5 F5          	PUSH	AF
1697+  66F6 DD E5       	PUSH	IX
1698+  66F8 FD E5       	PUSH	IY
1699+  66FA ED 57       	LD	A,I	     ;GET INTERUPT VECTOR BYTE
1700+  66FC 47          	LD	B,A
1701+  66FD ED 5F       	LD	A,R	     ;GET REFRESH BYTE
1702+  66FF 4F          	LD	C,A
1703+  6700 C5          	PUSH	BC	     ;SAVE
1704+  6701 C3 5D 60    	JP	START	     ;BACK TO START
1705+  6704             ;
1706+  6704             ; THIS IS THE INTERNAL KEYBOARD
1707+  6704             ; HANDLING ROUTINE.  IT WILL IGNORE
1708+  6704             ; RUBOUTS (0FFH) AND BLANKS (00),
1709+  6704             ; AND IT WILL NOT ECHO CR'S & N'S.
1710+  6704             ; (NO N'S FOR THE "NULL" COMMAND).
1711+  6704             ; IT CONVERTS LOWER CASE TO UPPER
1712+  6704             ; CASE FOR THE LOOK-UP OF COMMANDS.
1713+  6704             ;
1714+  6704             ; OTHER CHARACTERS ARE ECHOED AS THEY
1715+  6704             ; ARE RECEIVED.
1716+  6704             ;
1717+  6704 CD F5 65    KI:	CALL	CI	     ;GET CHARACTER FROM CONSOLE
1718+  6707 E6 7F       	AND	7FH	     ;CLEAR PARITY BIT
1719+  6709 C9          	RET	
1720+  670A             ;
1721+  670A CD 04 67    TI:	CALL	KI
1722+  670D 3C          	INC	A	     ;IGNORE RUBOUTS
1723+  670E F8          	RET	M
1724+  670F 3D          	DEC	A	     ;IGNORE NULLS
1725+  6710 C8          	RET	Z
1726+  6711 FE 4E       	CP	'N'	     ;IGNORE N'S FOR NULL CMND
1727+  6713 C8          	RET	Z
1728+  6714 FE 6E       	CP	'n'
1729+  6716 28 10       	JR	Z,..T
1730+  6718 FE 0D       	CP	CR	     ;IGNORE CR'S
1731+  671A C8          	RET	Z
1732+  671B C5          	PUSH	BC
1733+  671C 4F          	LD	C,A
1734+  671D CD 74 64    	CALL	CO
1735+  6720 79          	LD	A,C
1736+  6721 C1          	POP	BC
1737+  6722 FE 40       	CP	'A'-1	     ;CONVERT TO UPPER CASE
1738+  6724 D8          	RET	C
1739+  6725 FE 7B       	CP	'z'+1
1740+  6727 D0          	RET	NC
1741+  6728 E6 5F       ..T:	AND	05FH
1742+  672A C9          	RET	
1743+  672B             ;
1744+  672B             ; THIS ROUTINE ALLOWS EXAMINATION OF
1745+  672B             ; ANY INPUT PORT, OR THE SEENDING OF
1746+  672B             ; ANY VALUE TO ANY PORT.
1747+  672B             ;
1748+  672B             ; QO<N>,<V>[CR]
1749+  672B             ;	OUTPUT TO PORT <N>, THE VALUE <V>
1750+  672B             ;
1751+  672B             ; QI<N>[CR]
1752+  672B             ;	DISPLAY THE PORT <N>
1753+  672B             ;
1754+  672B CD 0A 67    QUERY:	CALL	TI
1755+  672E FE 4F       	CP	'O'
1756+  6730 28 1C       	JR	Z,QUO
1757+  6732 FE 49       	CP	'I'
1758+  6734 C2 4E 64    	JP	NZ,ERROR
1759+  6737 CD 2F 65    	CALL	EXPR1
1760+  673A C1          	POP	BC
1761+  673B ED 58       	IN	E,(C)
1762+  673D 06 08       BITS:	LD	B,8	     ;DISPLAY 8 BITS
1763+  673F CD 72 64    	CALL	BLK
1764+  6742 CB 23       ..Q2:	SLA	E
1765+  6744 3E 18       	LD	A,'0'>>1	; WW: WAS "LD	A,'0' >1"
1766+  6746 8F          	ADC	A	     ;MAKE "0" OR "1"
1767+  6747 4F          	LD	C,A
1768+  6748 CD 74 64    	CALL	CO
1769+  674B 10 F5       	DJNZ	..Q2
1770+  674D C9          	RET	
1771+  674E CD 31 65    QUO:	CALL	EXPR
1772+  6751 D1          	POP	DE
1773+  6752 C1          	POP	BC
1774+  6753 ED 59       	OUT	(C),E
1775+  6755 C9          	RET	
1776+  6756             ;
1777+  6756             ; THIS ROUTINE VERIFIES THE CONTENTS
1778+  6756             ; OF ONE MEMORY BLOCK WITH ANOTHER.
1779+  6756             ;
1780+  6756             ; V<ADDR1>,<ADDR2>,<ADDR3>
1781+  6756             ;	VERIFY FROM <1> THRU <2> WITH
1782+  6756             ; THE CONTENTS OF MEMORY BEGINNING AT <3>
1783+  6756             ;
1784+  6756 CD 24 65    VERIFY:	CALL	EXPR3	     ;GET 3 PARAMENTERS
1785+  6759 0A          VERI0:	LD	A,(BC)
1786+  675A BE          	CP	(HL)
1787+  675B 28 05       	JR	Z,..B
1788+  675D C5          	PUSH	BC
1789+  675E CD 47 61    	CALL	CERR	     ;DISPLAY ERRORS
1790+  6761 C1          	POP	BC
1791+  6762 03          ..B:	INC	BC
1792+  6763 CD 5D 65    	CALL	HILOX
1793+  6766 18 F1       	JR	VERI0
1794+  6768             ;
1795+  6768             ; <SYSTEM I/O LOOK-UP TABLE>
1796+  6768             ;
1797+  6768             ; THE FIRST CHARACTER IS THE DEVICE NAME
1798+  6768             ; (ONE LETTER) AND THE NEXT FOUR ARE THE
1799+  6768             ; NAMES OF THE FOUR POSSIBLE DRIVERS TO BE
1800+  6768             ; ASSIGNED.
1801+  6768             ;
1802+  6768             LTBL:	
1803+  6768 43           DB	'C'		     ;CONSOLE ASSIGNMENTS
1804+  6769 54           DB	'T'		     ;CTTY	T=TELEPRINTER
1805+  676A 43           DB	'C'		     ;CCRT	C=CRT (VIDEO MONITOR)
1806+  676B 42           DB	'B'		     ;BATCH= COMMANDS FROM READER
1807+  676C 55           DB	'U'		     ;CUSE	USER
1808+  676D             ;
1809+  676D 52           DB	'R'		     ;READER ASSIGNMENTS
1810+  676E 54           DB	'T'		     ;RTTY
1811+  676F 50           DB	'P'		     ;RPTR	P=PAPER TAPE
1812+  6770 43           DB	'C'		     ;RCAS	C=CASSETTE
1813+  6771 55           DB	'U'		     ;RUSER	USER
1814+  6772             ;
1815+  6772 50           DB	'P'		     ;PUNCH ASSIGNMENTS
1816+  6773 54           DB	'T'		     ;PTTY
1817+  6774 50           DB	'P'		     ;PPTP
1818+  6775 43           DB	'C'		     ;PCAS	C=CASSETTE
1819+  6776 55           DB	'U'		     ;PUSER	USER
1820+  6777             ;
1821+  6777 4C           DB	'L'		     ;LIST ASSIGNMENTS
1822+  6778 54           DB	'T'		     ;LTTY	LIST=TELEPRINTER
1823+  6779 43           DB	'C'		     ;LCRT	LIST=CRT
1824+  677A 4C           DB	'L'		     ;LINE PRINTER
1825+  677B 55           DB	'U'		     ;LUSER	USER
1826+  677C             ;
1827+  677C             ;
1828+  677C             ; THIS IS A SHORT PROGRAM, EXECUTED
1829+  677C             ; UPON EXECUTING A "GO" COMMAND. IT
1830+  677C             ; IS PLACED IN THE WORK AREA WHEN
1831+  677C             ; THE MONITOR IS INITIALIZED, AS IT
1832+  677C             ; :REQUIRES RAM FOR PROPER OPERATION.
1833+  677C             ;
1834+  677C             EXIT:	;EXIT ROUTINE (LOADS ALL REGISTERS)
1835+  677C C1          	POP	BC
1836+  677D 79          	LD	A,C
1837+  677E ED 4F       	LD	R,A
1838+  6780 78          	LD	A,B
1839+  6781 ED 47       	LD	I,A	
1840+  6783 FD E1       	POP	IY
1841+  6785 DD E1       	POP	IX
1842+  6787 F1          	POP	AF
1843+  6788 C1          	POP	BC
1844+  6789 D1          	POP	DE
1845+  678A E1          	POP	HL
1846+  678B 08          	EX	AF,AF'	
1847+  678C D9          	EXX	
1848+  678D D1          	POP	DE
1849+  678E C1          	POP	BC
1850+  678F F1          	POP	AF
1851+  6790 E1          	POP	HL
1852+  6791 F9          	LD	SP,HL
1853+  6792 00          	NOP		     ;RESERVED FOR ENABLE INTERUPTS
1854+  6793 21 00 00    	LD	HL,0
1855+  6796 C3 00 00    	JP	0
1856+  6799             ;
1857+  6799 00 00       	DW	0	     ;STORAGE AREA FOR TRAP DATA
1858+  679B 00          	DB	0
1859+  679C 00 00       	DW	0
1860+  679E 00          	DB	0
1861+  679F             ;
1862+  679F             ; DISPLACEMENTS OF REGISTER
1863+  679F             ; STORAGE FROM NORMAL STACK
1864+  679F             ; LOCATION.
1865+  679F             ;
1866+  679F             ENDX:	
1867+  679F             ;
1868+  679F             ALOC:	EQU	15H
1869+  679F             BLOC:	EQU	13H
1870+  679F             CLOC:	EQU	12H
1871+  679F             DLOC:	EQU	11H
1872+  679F             ELOC:	EQU	10H
1873+  679F             FLOC:	EQU	14H
1874+  679F             HLOC:	EQU	31H
1875+  679F             LLOC:	EQU	30H
1876+  679F             PLOC:	EQU	34H
1877+  679F             SLOC:	EQU	17H
1878+  679F             TLOC:	EQU	35H
1879+  679F             TLOCX:	EQU	25H
1880+  679F             LLOCX:	EQU	20H
1881+  679F             ;
1882+  679F             APLOC:	EQU	09H
1883+  679F             BPLOC:	EQU	0BH
1884+  679F             CPLOC:	EQU	0AH
1885+  679F             DPLOC:	EQU	0DH
1886+  679F             EPLOC:	EQU	0CH
1887+  679F             FPLOC:	EQU	08H
1888+  679F             HPLOC:	EQU	0FH
1889+  679F             LPLOC:	EQU	0EH
1890+  679F             XLOC:	EQU	07
1891+  679F             YLOC:	EQU	05
1892+  679F             RLOC:	EQU	02
1893+  679F             ILOC:	EQU	03
1894+  679F             ;
1895+  679F             ;
1896+  679F             ; THIS IS THE TABLE USED TO DETERMINE
1897+  679F             ; A VALID REGISTER IDENTIFIER, AND IT'S
1898+  679F             ; DISPLACEMENT FROM THE STACK POINTER.
1899+  679F             ;
1900+  679F             ; POSITION ONE= REGISTER NAME, WITH BIT 7 INDICATING
1901+  679F             ; END OF TABLE.
1902+  679F             ;
1903+  679F             ; POSITION TWO= BIAS FROM CURRENT STACK LEVEL OR'ED
1904+  679F             ; WITH A TWO-BIT FLAG.	00XXXXXX=BYTE
1905+  679F             ;			10XXXXXX=WORD
1906+  679F             ;			11XXXXXX=SPECIAL FOR "M" REG.
1907+  679F             ;
1908+  679F             ACTBL:		;NORMAL SET OF REGISTERS (8080)
1909+  679F             ;		;PLUS THE INTERUPT REGISTER ("I")
1910+  679F             ;
1911+  679F 41 15       	DB	'A',ALOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1912+  67A1 42 13       	DB	'B',BLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1913+  67A3 43 12       	DB	'C',CLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1914+  67A5 44 11       	DB	'D',DLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1915+  67A7 45 10       	DB	'E',ELOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1916+  67A9 46 14       	DB	'F',FLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1917+  67AB 48 31       	DB	'H',HLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1918+  67AD 4C 30       	DB	'L',LLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1919+  67AF 4D F1       	DB	'M',HLOC | 0C0H		; WW: REPLACED "OR" WITH "|" FOR TASM
1920+  67B1 50 B4       	DB	'P',PLOC | 080H		; WW: REPLACED "OR" WITH "|" FOR TASM
1921+  67B3 53 97       	DB	'S',SLOC | 080H		; WW: REPLACED "OR" WITH "|" FOR TASM
1922+  67B5 49 03       	DB	'I',ILOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1923+  67B7             ;
1924+  67B7             ;	DB	" RWA"
1925+  67B7             ;
1926+  67B7             PRMTB:	;ADDITIONAL SET OF REGISTERS (Z-80)
1927+  67B7             ;
1928+  67B7 41 09       	DB	'A',APLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1929+  67B9 42 0B       	DB	'B',BPLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1930+  67BB 43 0A       	DB	'C',CPLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1931+  67BD 44 0D       	DB	'D',DPLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1932+  67BF 45 0C       	DB	'E',EPLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1933+  67C1 46 08       	DB	'F',FPLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1934+  67C3 48 0F       	DB	'H',HPLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1935+  67C5 4C 0E       	DB	'L',LPLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1936+  67C7 4D CF       	DB	'M',HPLOC | 0C0H	; WW: REPLACED "OR" WITH "|" FOR TASM
1937+  67C9 58 87       	DB	'X',XLOC | 080H		; WW: REPLACED "OR" WITH "|" FOR TASM
1938+  67CB 59 85       	DB	'Y',YLOC | 080H		; WW: REPLACED "OR" WITH "|" FOR TASM
1939+  67CD 52 02       	DB	'R',RLOC | 0		; WW: REPLACED "OR" WITH "|" FOR TASM
1940+  67CF C1          	DB	0C1H
1941+  67D0             ;
1942+  67D0             Z:	
1943+  67D0             ;WW	END0078   67D0             ;
0079   67D0 FF FF FF FF 	.FILL	$7000 - $
0079   67D4 FF FF FF FF 
0079   67D8 FF FF FF FF 
0079   67DC FF FF FF FF 
0079   67E0 FF FF FF FF 
0079   67E4 FF FF FF FF 
0079   67E8 FF FF FF FF 
0079   67EC FF FF FF FF 
0079   67F0 FF FF FF FF 
0079   67F4 FF FF FF FF 
0079   67F8 FF FF FF FF 
0079   67FC FF FF FF FF 
0079   6800 FF FF FF FF 
0079   6804 FF FF FF FF 
0079   6808 FF FF FF FF 
0079   680C FF FF FF FF 
0079   6810 FF FF FF FF 
0079   6814 FF FF FF FF 
0079   6818 FF FF FF FF 
0079   681C FF FF FF FF 
0079   6820 FF FF FF FF 
0079   6824 FF FF FF FF 
0079   6828 FF FF FF FF 
0079   682C FF FF FF FF 
0079   6830 FF FF FF FF 
0079   6834 FF FF FF FF 
0079   6838 FF FF FF FF 
0079   683C FF FF FF FF 
0079   6840 FF FF FF FF 
0079   6844 FF FF FF FF 
0079   6848 FF FF FF FF 
0079   684C FF FF FF FF 
0079   6850 FF FF FF FF 
0079   6854 FF FF FF FF 
0079   6858 FF FF FF FF 
0079   685C FF FF FF FF 
0079   6860 FF FF FF FF 
0079   6864 FF FF FF FF 
0079   6868 FF FF FF FF 
0079   686C FF FF FF FF 
0079   6870 FF FF FF FF 
0079   6874 FF FF FF FF 
0079   6878 FF FF FF FF 
0079   687C FF FF FF FF 
0079   6880 FF FF FF FF 
0079   6884 FF FF FF FF 
0079   6888 FF FF FF FF 
0079   688C FF FF FF FF 
0079   6890 FF FF FF FF 
0079   6894 FF FF FF FF 
0079   6898 FF FF FF FF 
0079   689C FF FF FF FF 
0079   68A0 FF FF FF FF 
0079   68A4 FF FF FF FF 
0079   68A8 FF FF FF FF 
0079   68AC FF FF FF FF 
0079   68B0 FF FF FF FF 
0079   68B4 FF FF FF FF 
0079   68B8 FF FF FF FF 
0079   68BC FF FF FF FF 
0079   68C0 FF FF FF FF 
0079   68C4 FF FF FF FF 
0079   68C8 FF FF FF FF 
0079   68CC FF FF FF FF 
0079   68D0 FF FF FF FF 
0079   68D4 FF FF FF FF 
0079   68D8 FF FF FF FF 
0079   68DC FF FF FF FF 
0079   68E0 FF FF FF FF 
0079   68E4 FF FF FF FF 
0079   68E8 FF FF FF FF 
0079   68EC FF FF FF FF 
0079   68F0 FF FF FF FF 
0079   68F4 FF FF FF FF 
0079   68F8 FF FF FF FF 
0079   68FC FF FF FF FF 
0079   6900 FF FF FF FF 
0079   6904 FF FF FF FF 
0079   6908 FF FF FF FF 
0079   690C FF FF FF FF 
0079   6910 FF FF FF FF 
0079   6914 FF FF FF FF 
0079   6918 FF FF FF FF 
0079   691C FF FF FF FF 
0079   6920 FF FF FF FF 
0079   6924 FF FF FF FF 
0079   6928 FF FF FF FF 
0079   692C FF FF FF FF 
0079   6930 FF FF FF FF 
0079   6934 FF FF FF FF 
0079   6938 FF FF FF FF 
0079   693C FF FF FF FF 
0079   6940 FF FF FF FF 
0079   6944 FF FF FF FF 
0079   6948 FF FF FF FF 
0079   694C FF FF FF FF 
0079   6950 FF FF FF FF 
0079   6954 FF FF FF FF 
0079   6958 FF FF FF FF 
0079   695C FF FF FF FF 
0079   6960 FF FF FF FF 
0079   6964 FF FF FF FF 
0079   6968 FF FF FF FF 
0079   696C FF FF FF FF 
0079   6970 FF FF FF FF 
0079   6974 FF FF FF FF 
0079   6978 FF FF FF FF 
0079   697C FF FF FF FF 
0079   6980 FF FF FF FF 
0079   6984 FF FF FF FF 
0079   6988 FF FF FF FF 
0079   698C FF FF FF FF 
0079   6990 FF FF FF FF 
0079   6994 FF FF FF FF 
0079   6998 FF FF FF FF 
0079   699C FF FF FF FF 
0079   69A0 FF FF FF FF 
0079   69A4 FF FF FF FF 
0079   69A8 FF FF FF FF 
0079   69AC FF FF FF FF 
0079   69B0 FF FF FF FF 
0079   69B4 FF FF FF FF 
0079   69B8 FF FF FF FF 
0079   69BC FF FF FF FF 
0079   69C0 FF FF FF FF 
0079   69C4 FF FF FF FF 
0079   69C8 FF FF FF FF 
0079   69CC FF FF FF FF 
0079   69D0 FF FF FF FF 
0079   69D4 FF FF FF FF 
0079   69D8 FF FF FF FF 
0079   69DC FF FF FF FF 
0079   69E0 FF FF FF FF 
0079   69E4 FF FF FF FF 
0079   69E8 FF FF FF FF 
0079   69EC FF FF FF FF 
0079   69F0 FF FF FF FF 
0079   69F4 FF FF FF FF 
0079   69F8 FF FF FF FF 
0079   69FC FF FF FF FF 
0079   6A00 FF FF FF FF 
0079   6A04 FF FF FF FF 
0079   6A08 FF FF FF FF 
0079   6A0C FF FF FF FF 
0079   6A10 FF FF FF FF 
0079   6A14 FF FF FF FF 
0079   6A18 FF FF FF FF 
0079   6A1C FF FF FF FF 
0079   6A20 FF FF FF FF 
0079   6A24 FF FF FF FF 
0079   6A28 FF FF FF FF 
0079   6A2C FF FF FF FF 
0079   6A30 FF FF FF FF 
0079   6A34 FF FF FF FF 
0079   6A38 FF FF FF FF 
0079   6A3C FF FF FF FF 
0079   6A40 FF FF FF FF 
0079   6A44 FF FF FF FF 
0079   6A48 FF FF FF FF 
0079   6A4C FF FF FF FF 
0079   6A50 FF FF FF FF 
0079   6A54 FF FF FF FF 
0079   6A58 FF FF FF FF 
0079   6A5C FF FF FF FF 
0079   6A60 FF FF FF FF 
0079   6A64 FF FF FF FF 
0079   6A68 FF FF FF FF 
0079   6A6C FF FF FF FF 
0079   6A70 FF FF FF FF 
0079   6A74 FF FF FF FF 
0079   6A78 FF FF FF FF 
0079   6A7C FF FF FF FF 
0079   6A80 FF FF FF FF 
0079   6A84 FF FF FF FF 
0079   6A88 FF FF FF FF 
0079   6A8C FF FF FF FF 
0079   6A90 FF FF FF FF 
0079   6A94 FF FF FF FF 
0079   6A98 FF FF FF FF 
0079   6A9C FF FF FF FF 
0079   6AA0 FF FF FF FF 
0079   6AA4 FF FF FF FF 
0079   6AA8 FF FF FF FF 
0079   6AAC FF FF FF FF 
0079   6AB0 FF FF FF FF 
0079   6AB4 FF FF FF FF 
0079   6AB8 FF FF FF FF 
0079   6ABC FF FF FF FF 
0079   6AC0 FF FF FF FF 
0079   6AC4 FF FF FF FF 
0079   6AC8 FF FF FF FF 
0079   6ACC FF FF FF FF 
0079   6AD0 FF FF FF FF 
0079   6AD4 FF FF FF FF 
0079   6AD8 FF FF FF FF 
0079   6ADC FF FF FF FF 
0079   6AE0 FF FF FF FF 
0079   6AE4 FF FF FF FF 
0079   6AE8 FF FF FF FF 
0079   6AEC FF FF FF FF 
0079   6AF0 FF FF FF FF 
0079   6AF4 FF FF FF FF 
0079   6AF8 FF FF FF FF 
0079   6AFC FF FF FF FF 
0079   6B00 FF FF FF FF 
0079   6B04 FF FF FF FF 
0079   6B08 FF FF FF FF 
0079   6B0C FF FF FF FF 
0079   6B10 FF FF FF FF 
0079   6B14 FF FF FF FF 
0079   6B18 FF FF FF FF 
0079   6B1C FF FF FF FF 
0079   6B20 FF FF FF FF 
0079   6B24 FF FF FF FF 
0079   6B28 FF FF FF FF 
0079   6B2C FF FF FF FF 
0079   6B30 FF FF FF FF 
0079   6B34 FF FF FF FF 
0079   6B38 FF FF FF FF 
0079   6B3C FF FF FF FF 
0079   6B40 FF FF FF FF 
0079   6B44 FF FF FF FF 
0079   6B48 FF FF FF FF 
0079   6B4C FF FF FF FF 
0079   6B50 FF FF FF FF 
0079   6B54 FF FF FF FF 
0079   6B58 FF FF FF FF 
0079   6B5C FF FF FF FF 
0079   6B60 FF FF FF FF 
0079   6B64 FF FF FF FF 
0079   6B68 FF FF FF FF 
0079   6B6C FF FF FF FF 
0079   6B70 FF FF FF FF 
0079   6B74 FF FF FF FF 
0079   6B78 FF FF FF FF 
0079   6B7C FF FF FF FF 
0079   6B80 FF FF FF FF 
0079   6B84 FF FF FF FF 
0079   6B88 FF FF FF FF 
0079   6B8C FF FF FF FF 
0079   6B90 FF FF FF FF 
0079   6B94 FF FF FF FF 
0079   6B98 FF FF FF FF 
0079   6B9C FF FF FF FF 
0079   6BA0 FF FF FF FF 
0079   6BA4 FF FF FF FF 
0079   6BA8 FF FF FF FF 
0079   6BAC FF FF FF FF 
0079   6BB0 FF FF FF FF 
0079   6BB4 FF FF FF FF 
0079   6BB8 FF FF FF FF 
0079   6BBC FF FF FF FF 
0079   6BC0 FF FF FF FF 
0079   6BC4 FF FF FF FF 
0079   6BC8 FF FF FF FF 
0079   6BCC FF FF FF FF 
0079   6BD0 FF FF FF FF 
0079   6BD4 FF FF FF FF 
0079   6BD8 FF FF FF FF 
0079   6BDC FF FF FF FF 
0079   6BE0 FF FF FF FF 
0079   6BE4 FF FF FF FF 
0079   6BE8 FF FF FF FF 
0079   6BEC FF FF FF FF 
0079   6BF0 FF FF FF FF 
0079   6BF4 FF FF FF FF 
0079   6BF8 FF FF FF FF 
0079   6BFC FF FF FF FF 
0079   6C00 FF FF FF FF 
0079   6C04 FF FF FF FF 
0079   6C08 FF FF FF FF 
0079   6C0C FF FF FF FF 
0079   6C10 FF FF FF FF 
0079   6C14 FF FF FF FF 
0079   6C18 FF FF FF FF 
0079   6C1C FF FF FF FF 
0079   6C20 FF FF FF FF 
0079   6C24 FF FF FF FF 
0079   6C28 FF FF FF FF 
0079   6C2C FF FF FF FF 
0079   6C30 FF FF FF FF 
0079   6C34 FF FF FF FF 
0079   6C38 FF FF FF FF 
0079   6C3C FF FF FF FF 
0079   6C40 FF FF FF FF 
0079   6C44 FF FF FF FF 
0079   6C48 FF FF FF FF 
0079   6C4C FF FF FF FF 
0079   6C50 FF FF FF FF 
0079   6C54 FF FF FF FF 
0079   6C58 FF FF FF FF 
0079   6C5C FF FF FF FF 
0079   6C60 FF FF FF FF 
0079   6C64 FF FF FF FF 
0079   6C68 FF FF FF FF 
0079   6C6C FF FF FF FF 
0079   6C70 FF FF FF FF 
0079   6C74 FF FF FF FF 
0079   6C78 FF FF FF FF 
0079   6C7C FF FF FF FF 
0079   6C80 FF FF FF FF 
0079   6C84 FF FF FF FF 
0079   6C88 FF FF FF FF 
0079   6C8C FF FF FF FF 
0079   6C90 FF FF FF FF 
0079   6C94 FF FF FF FF 
0079   6C98 FF FF FF FF 
0079   6C9C FF FF FF FF 
0079   6CA0 FF FF FF FF 
0079   6CA4 FF FF FF FF 
0079   6CA8 FF FF FF FF 
0079   6CAC FF FF FF FF 
0079   6CB0 FF FF FF FF 
0079   6CB4 FF FF FF FF 
0079   6CB8 FF FF FF FF 
0079   6CBC FF FF FF FF 
0079   6CC0 FF FF FF FF 
0079   6CC4 FF FF FF FF 
0079   6CC8 FF FF FF FF 
0079   6CCC FF FF FF FF 
0079   6CD0 FF FF FF FF 
0079   6CD4 FF FF FF FF 
0079   6CD8 FF FF FF FF 
0079   6CDC FF FF FF FF 
0079   6CE0 FF FF FF FF 
0079   6CE4 FF FF FF FF 
0079   6CE8 FF FF FF FF 
0079   6CEC FF FF FF FF 
0079   6CF0 FF FF FF FF 
0079   6CF4 FF FF FF FF 
0079   6CF8 FF FF FF FF 
0079   6CFC FF FF FF FF 
0079   6D00 FF FF FF FF 
0079   6D04 FF FF FF FF 
0079   6D08 FF FF FF FF 
0079   6D0C FF FF FF FF 
0079   6D10 FF FF FF FF 
0079   6D14 FF FF FF FF 
0079   6D18 FF FF FF FF 
0079   6D1C FF FF FF FF 
0079   6D20 FF FF FF FF 
0079   6D24 FF FF FF FF 
0079   6D28 FF FF FF FF 
0079   6D2C FF FF FF FF 
0079   6D30 FF FF FF FF 
0079   6D34 FF FF FF FF 
0079   6D38 FF FF FF FF 
0079   6D3C FF FF FF FF 
0079   6D40 FF FF FF FF 
0079   6D44 FF FF FF FF 
0079   6D48 FF FF FF FF 
0079   6D4C FF FF FF FF 
0079   6D50 FF FF FF FF 
0079   6D54 FF FF FF FF 
0079   6D58 FF FF FF FF 
0079   6D5C FF FF FF FF 
0079   6D60 FF FF FF FF 
0079   6D64 FF FF FF FF 
0079   6D68 FF FF FF FF 
0079   6D6C FF FF FF FF 
0079   6D70 FF FF FF FF 
0079   6D74 FF FF FF FF 
0079   6D78 FF FF FF FF 
0079   6D7C FF FF FF FF 
0079   6D80 FF FF FF FF 
0079   6D84 FF FF FF FF 
0079   6D88 FF FF FF FF 
0079   6D8C FF FF FF FF 
0079   6D90 FF FF FF FF 
0079   6D94 FF FF FF FF 
0079   6D98 FF FF FF FF 
0079   6D9C FF FF FF FF 
0079   6DA0 FF FF FF FF 
0079   6DA4 FF FF FF FF 
0079   6DA8 FF FF FF FF 
0079   6DAC FF FF FF FF 
0079   6DB0 FF FF FF FF 
0079   6DB4 FF FF FF FF 
0079   6DB8 FF FF FF FF 
0079   6DBC FF FF FF FF 
0079   6DC0 FF FF FF FF 
0079   6DC4 FF FF FF FF 
0079   6DC8 FF FF FF FF 
0079   6DCC FF FF FF FF 
0079   6DD0 FF FF FF FF 
0079   6DD4 FF FF FF FF 
0079   6DD8 FF FF FF FF 
0079   6DDC FF FF FF FF 
0079   6DE0 FF FF FF FF 
0079   6DE4 FF FF FF FF 
0079   6DE8 FF FF FF FF 
0079   6DEC FF FF FF FF 
0079   6DF0 FF FF FF FF 
0079   6DF4 FF FF FF FF 
0079   6DF8 FF FF FF FF 
0079   6DFC FF FF FF FF 
0079   6E00 FF FF FF FF 
0079   6E04 FF FF FF FF 
0079   6E08 FF FF FF FF 
0079   6E0C FF FF FF FF 
0079   6E10 FF FF FF FF 
0079   6E14 FF FF FF FF 
0079   6E18 FF FF FF FF 
0079   6E1C FF FF FF FF 
0079   6E20 FF FF FF FF 
0079   6E24 FF FF FF FF 
0079   6E28 FF FF FF FF 
0079   6E2C FF FF FF FF 
0079   6E30 FF FF FF FF 
0079   6E34 FF FF FF FF 
0079   6E38 FF FF FF FF 
0079   6E3C FF FF FF FF 
0079   6E40 FF FF FF FF 
0079   6E44 FF FF FF FF 
0079   6E48 FF FF FF FF 
0079   6E4C FF FF FF FF 
0079   6E50 FF FF FF FF 
0079   6E54 FF FF FF FF 
0079   6E58 FF FF FF FF 
0079   6E5C FF FF FF FF 
0079   6E60 FF FF FF FF 
0079   6E64 FF FF FF FF 
0079   6E68 FF FF FF FF 
0079   6E6C FF FF FF FF 
0079   6E70 FF FF FF FF 
0079   6E74 FF FF FF FF 
0079   6E78 FF FF FF FF 
0079   6E7C FF FF FF FF 
0079   6E80 FF FF FF FF 
0079   6E84 FF FF FF FF 
0079   6E88 FF FF FF FF 
0079   6E8C FF FF FF FF 
0079   6E90 FF FF FF FF 
0079   6E94 FF FF FF FF 
0079   6E98 FF FF FF FF 
0079   6E9C FF FF FF FF 
0079   6EA0 FF FF FF FF 
0079   6EA4 FF FF FF FF 
0079   6EA8 FF FF FF FF 
0079   6EAC FF FF FF FF 
0079   6EB0 FF FF FF FF 
0079   6EB4 FF FF FF FF 
0079   6EB8 FF FF FF FF 
0079   6EBC FF FF FF FF 
0079   6EC0 FF FF FF FF 
0079   6EC4 FF FF FF FF 
0079   6EC8 FF FF FF FF 
0079   6ECC FF FF FF FF 
0079   6ED0 FF FF FF FF 
0079   6ED4 FF FF FF FF 
0079   6ED8 FF FF FF FF 
0079   6EDC FF FF FF FF 
0079   6EE0 FF FF FF FF 
0079   6EE4 FF FF FF FF 
0079   6EE8 FF FF FF FF 
0079   6EEC FF FF FF FF 
0079   6EF0 FF FF FF FF 
0079   6EF4 FF FF FF FF 
0079   6EF8 FF FF FF FF 
0079   6EFC FF FF FF FF 
0079   6F00 FF FF FF FF 
0079   6F04 FF FF FF FF 
0079   6F08 FF FF FF FF 
0079   6F0C FF FF FF FF 
0079   6F10 FF FF FF FF 
0079   6F14 FF FF FF FF 
0079   6F18 FF FF FF FF 
0079   6F1C FF FF FF FF 
0079   6F20 FF FF FF FF 
0079   6F24 FF FF FF FF 
0079   6F28 FF FF FF FF 
0079   6F2C FF FF FF FF 
0079   6F30 FF FF FF FF 
0079   6F34 FF FF FF FF 
0079   6F38 FF FF FF FF 
0079   6F3C FF FF FF FF 
0079   6F40 FF FF FF FF 
0079   6F44 FF FF FF FF 
0079   6F48 FF FF FF FF 
0079   6F4C FF FF FF FF 
0079   6F50 FF FF FF FF 
0079   6F54 FF FF FF FF 
0079   6F58 FF FF FF FF 
0079   6F5C FF FF FF FF 
0079   6F60 FF FF FF FF 
0079   6F64 FF FF FF FF 
0079   6F68 FF FF FF FF 
0079   6F6C FF FF FF FF 
0079   6F70 FF FF FF FF 
0079   6F74 FF FF FF FF 
0079   6F78 FF FF FF FF 
0079   6F7C FF FF FF FF 
0079   6F80 FF FF FF FF 
0079   6F84 FF FF FF FF 
0079   6F88 FF FF FF FF 
0079   6F8C FF FF FF FF 
0079   6F90 FF FF FF FF 
0079   6F94 FF FF FF FF 
0079   6F98 FF FF FF FF 
0079   6F9C FF FF FF FF 
0079   6FA0 FF FF FF FF 
0079   6FA4 FF FF FF FF 
0079   6FA8 FF FF FF FF 
0079   6FAC FF FF FF FF 
0079   6FB0 FF FF FF FF 
0079   6FB4 FF FF FF FF 
0079   6FB8 FF FF FF FF 
0079   6FBC FF FF FF FF 
0079   6FC0 FF FF FF FF 
0079   6FC4 FF FF FF FF 
0079   6FC8 FF FF FF FF 
0079   6FCC FF FF FF FF 
0079   6FD0 FF FF FF FF 
0079   6FD4 FF FF FF FF 
0079   6FD8 FF FF FF FF 
0079   6FDC FF FF FF FF 
0079   6FE0 FF FF FF FF 
0079   6FE4 FF FF FF FF 
0079   6FE8 FF FF FF FF 
0079   6FEC FF FF FF FF 
0079   6FF0 FF FF FF FF 
0079   6FF4 FF FF FF FF 
0079   6FF8 FF FF FF FF 
0079   6FFC FF FF FF FF 
0080   7000             ;
0081   7000             	.END
tasm: Number of errors = 0
